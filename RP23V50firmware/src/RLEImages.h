#ifndef USE_FULL_IMAGES

#ifndef RLE_IMAGES_H
#define RLE_IMAGES_H

const uint32_t startupFrame0[] PROGMEM = {
0x000404, 0x000001, 0x000101, 0x000403, 0x000201, 0x000100, 0x010100, 0x040501, 0x040401, 0x000047, 0x000190, 0x000046, 0x000191, 0x00005F, 0x000192, 0x000048, 
0x000194, 0x000049, 0x000195, 0x00004A, 0x000196, 0x00004B, 0x000197, 0x00004C, 0x000198, 0x00004D, 0x000199, 0x00004E, 0x00019A, 0x00004F, 0x00019B, 0x000050, 
0x00019C, 0x000051, 0x00019D, 0x000052, 0x00019E, 0x000053, 0x00019F, 0x000055, 0x0001A1};

const int blackStartIndexes0[] PROGMEM = {
0, 21, 160, 192, 224, 256, 577, 609, 641};

const int blackEndIndexes0[] PROGMEM = {
18, 158, 190, 222, 254, 575, 607, 639, 671};

//RLE image data for imageIndex: 1


const uint32_t startupFrame1[] PROGMEM = {
0x000100, 0x000303, 0x001010, 0x000304, 0x000101, 0x000101, 0x000101, 0x000100, 0x000201, 0x001D15, 0x000101, 0x001610, 0x000504, 0x010201, 0x161A07, 0x010200, 
0x30370E, 0x030301, 0x030401, 0x010100, 0x000404, 0x000001};

const int blackStartIndexes1[] PROGMEM = {
0, 17, 21, 53, 96, 192, 224, 256, 545, 578, 610, 642, 693};

const int blackEndIndexes1[] PROGMEM = {
15, 17, 49, 94, 189, 221, 254, 543, 575, 607, 639, 690, 703};

//RLE image data for imageIndex: 2


const uint32_t startupFrame2[] PROGMEM = {
0x00281E, 0x004B3A, 0x002820, 0x000202, 0x000100, 0x000202, 0x000607, 0x000100, 0x000101, 0x000E0A, 0x000100, 0x00120D, 0x00583C, 0x000100, 0x001E15, 0x005D40, 
0x000806, 0x000805, 0x000100, 0x000100, 0x030301, 0x010100, 0x1F250A, 0x060702, 0x7D8D21, 0x2B310C, 0x010100, 0x7F9022, 0x1A1E08, 0x010100, 0x30380F, 0x000100, 
0x000303, 0x001010, 0x000304};

const int blackStartIndexes2[] PROGMEM = {
0, 22, 24, 52, 64, 82, 160, 192, 224, 256, 288, 514, 546, 579, 611, 641, 
689, 693};

const int blackEndIndexes2[] PROGMEM = {
17, 22, 49, 62, 80, 158, 188, 220, 253, 285, 511, 543, 575, 607, 639, 687, 
689, 703};

//RLE image data for imageIndex: 3


const uint32_t startupFrame3[] PROGMEM = {
0x00160F, 0x007955, 0x009E72, 0x00513E, 0x00211A, 0x002821, 0x000D0B, 0x000202, 0x000202, 0x000100, 0x000100, 0x000201, 0x000302, 0x003928, 0x000302, 0x003726, 
0x008B60, 0x002319, 0x007B55, 0x009F6E, 0x000D09, 0x001810, 0x001A11, 0x000101, 0x1E2309, 0x0B0E04, 0x010101, 0x7D8E21, 0x4D5916, 0x161A07, 0xC0D830, 0x9EB329, 
0x30370D, 0xACC32D, 0x576419, 0x515E17, 0x010201, 0x00281E, 0x004B3A, 0x002820, 0x000202, 0x000100};

const int blackStartIndexes3[] PROGMEM = {
0, 21, 53, 84, 95, 126, 128, 160, 192, 224, 256, 286, 515, 547, 579, 610, 
642, 694, 696};

const int blackEndIndexes3[] PROGMEM = {
16, 49, 81, 93, 124, 126, 157, 188, 220, 252, 284, 511, 543, 575, 607, 639, 
689, 694, 703};

//RLE image data for imageIndex: 4


const uint32_t startupFrame4[] PROGMEM = {
0x000F0A, 0x007953, 0x00A773, 0x00A774, 0x007759, 0x001F1A, 0x000100, 0x00110C, 0x00805B, 0x007C5C, 0x001E18, 0x000100, 0x001513, 0x000A0A, 0x001C13, 0x001A12, 
0x007954, 0x001C14, 0x007C56, 0x00A774, 0x001E15, 0x007E57, 0x00A773, 0x00A774, 0x001710, 0x003F2A, 0x00412D, 0x003E2B, 0x000302, 0x738521, 0x4C5615, 0x20270B, 
0x050602, 0xB9D02E, 0xB2C92D, 0x96A927, 0x323A0E, 0xC2D82E, 0xC0D830, 0x8B9E26, 0x111405, 0xC0D830, 0x859824, 0x20260A, 0x869823, 0x22280B, 0x010100, 0x00160F, 
0x007955, 0x009E72, 0x00513E};

const int blackStartIndexes4[] PROGMEM = {
0, 22, 24, 53, 55, 84, 128, 160, 192, 224, 256, 285, 516, 548, 580, 611, 
642, 644, 693};

const int blackEndIndexes4[] PROGMEM = {
15, 22, 48, 53, 81, 126, 157, 188, 219, 251, 283, 511, 543, 575, 607, 639, 
642, 688, 703};

//RLE image data for imageIndex: 5


const uint32_t startupFrame5[] PROGMEM = {
0x006240, 0x00A96E, 0x00A96E, 0x00A96E, 0x009D6B, 0x004B33, 0x000E0A, 0x007953, 0x00A773, 0x009D6E, 0x004A3B, 0x00110C, 0x007857, 0x004D3B, 0x000906, 0x000A0A, 
0x000906, 0x005A3E, 0x000906, 0x005A3E, 0x00A774, 0x000A07, 0x005A3F, 0x00A774, 0x00A774, 0x000C09, 0x005D40, 0x00A774, 0x00A774, 0x00A773, 0x00261B, 0x007751, 
0x00734F, 0x00714F, 0x006D49, 0x000504, 0x2B3510, 0x242B0C, 0x171A06, 0x090B03, 0x010201, 0xB8D435, 0xADC530, 0x899B23, 0x5C6A1A, 0x1A1F08, 0xC3D92D, 0xC2D92E, 
0xC1D82F, 0xB9D02F, 0x333A0E, 0xC1D82F, 0xC1D82F, 0xB1C72D, 0x546219, 0xC1D82F, 0xB2C82C, 0x546119, 0xB4C72B, 0x576317, 0x000F0A, 0x007953, 0x00A773, 0x00A774, 
0x007759, 0x001F1A, 0x000100};

const int blackStartIndexes5[] PROGMEM = {
0, 22, 53, 84, 96, 115, 128, 160, 192, 224, 256, 284, 485, 517, 549, 580, 
611, 642, 694, 696};

const int blackEndIndexes5[] PROGMEM = {
15, 47, 80, 94, 113, 125, 156, 187, 218, 250, 282, 479, 511, 543, 575, 607, 
639, 687, 694, 703};

//RLE image data for imageIndex: 6


const uint32_t startupFrame6[] PROGMEM = {
0x001B26, 0x0083A4, 0x008DAC, 0x008CAC, 0x008DAB, 0x008BAC, 0x006082, 0x00131C, 0x000200, 0x006244, 0x00A872, 0x00A871, 0x00A673, 0x007655, 0x001B12, 0x000302, 
0x00140D, 0x00754F, 0x00A773, 0x007756, 0x001A15, 0x000302, 0x00402C, 0x001811, 0x00533E, 0x002019, 0x000201, 0x003F2C, 0x009769, 0x000505, 0x000101, 0x003E2B, 
0x00996A, 0x00A774, 0x000100, 0x003C2A, 0x009B6B, 0x00A774, 0x00A774, 0x000101, 0x003E2B, 0x009F6F, 0x00A774, 0x00A774, 0x00A774, 0x002D1F, 0x009164, 0x009C6C, 
0x009869, 0x00865B, 0x006C4B, 0x000C08, 0x00120C, 0x000F0A, 0x000F0A, 0x000905, 0x000101, 0x505A15, 0x6C7F21, 0x708423, 0x535E17, 0x29300D, 0x080B03, 0xB4CA2C, 
0xBCD42F, 0xBED52F, 0xB6CC2C, 0xAABF2C, 0x3D4511, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x8DA026, 0x101205, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x8B9F26, 0x121506, 
0xC1D82F, 0xC1D82F, 0x8C9E24, 0x151806, 0xC1D82F, 0x8D9B22, 0x1A1B06, 0x060701, 0x1D2007, 0x0B0D03, 0x006240, 0x00A96E, 0x00A96E, 0x00A96E, 0x009D6B, 0x004B33
};

const int blackStartIndexes6[] PROGMEM = {
0, 23, 54, 64, 85, 96, 116, 128, 147, 160, 192, 224, 256, 288, 486, 518, 
550, 581, 612, 643, 655, 694};

const int blackEndIndexes6[] PROGMEM = {
14, 46, 62, 79, 93, 112, 124, 145, 155, 186, 217, 249, 281, 479, 511, 543, 
575, 607, 639, 651, 687, 703};

//RLE image data for imageIndex: 7


const uint32_t startupFrame7[] PROGMEM = {
0x000406, 0x005789, 0x0079C3, 0x0079C3, 0x0079C3, 0x0079C3, 0x0079C3, 0x0072B4, 0x00334D, 0x001D29, 0x0082A5, 0x008CAD, 0x008CAD, 0x008CAC, 0x007FA5, 0x00344E, 
0x00201C, 0x000100, 0x006044, 0x00A773, 0x00A773, 0x009B6F, 0x004231, 0x000101, 0x002117, 0x00835C, 0x00130B, 0x00734E, 0x009E6F, 0x004131, 0x001F15, 0x00855C, 
0x00A774, 0x001510, 0x002820, 0x000504, 0x001F15, 0x00865D, 0x00A774, 0x00A774, 0x002117, 0x00855C, 0x00A774, 0x00A774, 0x00A774, 0x002419, 0x00845C, 0x00A774, 
0x00A774, 0x00A774, 0x00A774, 0x001F16, 0x00825A, 0x00A774, 0x00A471, 0x008F64, 0x008F63, 0x00A471, 0x001A12, 0x003A28, 0x003827, 0x003423, 0x002116, 0x002116, 
0x003523, 0x000100, 0x131505, 0x080902, 0x0C0E04, 0x121708, 0x0B0E04, 0x030401, 0xA6BA2A, 0x849420, 0x93A827, 0xAAC331, 0x93A827, 0x67751C, 0x1F2409, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC2D82E, 0xC1D82F, 0xB4CC2F, 0x333A0E, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xB2C92E, 0x495414, 0x020201, 0xC1D82F, 0xC1D82F, 0xC1D82F, 
0xB2C82D, 0x495313, 0xC1D82F, 0xC1D82F, 0xB4C72B, 0x4F5613, 0x101204, 0x0B0C03, 0xC1D82F, 0xB4C82C, 0x505713, 0x292E0A, 0x91A223, 0x7B8A1E, 0x252909, 0x050501, 
0x001B26, 0x0083A4, 0x008DAC, 0x008CAC, 0x008DAB, 0x008BAC, 0x006082, 0x00131C};

const int blackStartIndexes7[] PROGMEM = {
0, 23, 54, 64, 85, 88, 96, 116, 128, 148, 160, 192, 224, 256, 288, 314, 
454, 487, 519, 551, 581, 612, 623, 643, 657, 695};

const int blackEndIndexes7[] PROGMEM = {
13, 46, 62, 78, 86, 93, 111, 124, 144, 155, 186, 217, 248, 280, 312, 447, 
479, 511, 543, 575, 607, 620, 639, 651, 686, 703};

//RLE image data for imageIndex: 8


const uint32_t startupFrame8[] PROGMEM = {
0x000101, 0x003F63, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x005584, 0x000C11, 0x000001, 0x000101, 0x000508, 0x000508, 0x005587, 
0x0078C4, 0x0077C5, 0x0077C5, 0x0078C4, 0x007AC3, 0x005786, 0x00090C, 0x000007, 0x004473, 0x001A25, 0x0084A4, 0x008DAA, 0x008DAA, 0x008DAB, 0x005B7B, 0x00080D, 
0x000001, 0x000700, 0x005759, 0x008DAB, 0x005A3F, 0x00A872, 0x00A773, 0x007153, 0x000F09, 0x000101, 0x000100, 0x000705, 0x006244, 0x00A676, 0x00A774, 0x000B07, 
0x006D4D, 0x007556, 0x000B0A, 0x000503, 0x006043, 0x00A774, 0x00A774, 0x00A673, 0x000909, 0x000808, 0x000604, 0x006043, 0x00A774, 0x00A774, 0x00A674, 0x00A774, 
0x000604, 0x006143, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x000A07, 0x006747, 0x00A774, 0x00A774, 0x00A472, 0x00A774, 0x00A774, 0x00A774, 0x002519, 
0x006949, 0x006949, 0x005C3E, 0x00432E, 0x00583A, 0x006545, 0x006848, 0x000302, 0x000100, 0x000101, 0x010100, 0x010100, 0x010100, 0x303F1D, 0xB3CA30, 0x6E7C1B, 
0x383F0E, 0x353C0E, 0x4C5A18, 0x404A13, 0x21260A, 0x070802, 0xC1D82E, 0xC1D82F, 0xB6CC2C, 0xB2C92C, 0xBFD731, 0xBDD42F, 0xA9BF2B, 0x373F0F, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC2D82E, 0xC1D82F, 0x879924, 0x0F1105, 0xC1D82F, 0xC1D82F, 0xC0D72F, 0xC1D82F, 0xC1D82F, 0x809121, 0x0E1005, 0x010100, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0x879521, 0x0E1004, 0x010100, 0x040401, 0x010100, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x859320, 0x0D0D03, 0x080902, 0x6F7C1B, 0x839320, 0x242809, 
0xC1D82F, 0xC1D82F, 0x849120, 0x111204, 0x010100, 0x010100, 0x080802, 0x707D1B, 0xC1D82F, 0xC1D82F, 0xA7B928, 0x75801B, 0x33380C, 0x003757, 0x007AC2, 0x007AC2, 
0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x003F65, 0x000508, 0x00507F};

const int blackStartIndexes8[] PROGMEM = {
0, 24, 26, 30, 32, 55, 64, 86, 88, 96, 117, 119, 123, 128, 148, 160, 
179, 192, 224, 256, 288, 314, 320, 388, 390, 417, 456, 488, 520, 551, 553, 582, 
591, 594, 613, 624, 644, 646, 650, 658, 696};

const int blackEndIndexes8[] PROGMEM = {
12, 24, 28, 30, 45, 61, 78, 86, 92, 111, 117, 121, 123, 143, 154, 176, 
185, 216, 247, 279, 311, 318, 385, 388, 415, 447, 479, 511, 543, 551, 575, 588, 
592, 607, 619, 639, 644, 648, 650, 684, 701};

//RLE image data for imageIndex: 9


const uint32_t startupFrame9[] PROGMEM = {
0x001019, 0x006CAB, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x006FB0, 0x002335, 0x002338, 0x003655, 0x007AC1, 0x007AC2, 0x007AC2, 
0x007AC2, 0x007AC1, 0x007AC2, 0x0070B0, 0x002335, 0x00243A, 0x0070B2, 0x000203, 0x004E7A, 0x0078C4, 0x0077C5, 0x0077C5, 0x0078C4, 0x0070B0, 0x002334, 0x00203A, 
0x006FB7, 0x0077C5, 0x000001, 0x00141C, 0x008597, 0x0093A2, 0x0093A1, 0x008298, 0x002434, 0x003027, 0x008991, 0x0092A4, 0x0092A1, 0x004D31, 0x00A86F, 0x009A69, 
0x002E1F, 0x003021, 0x009B6C, 0x00A871, 0x00A86F, 0x00A86F, 0x000302, 0x00503A, 0x003428, 0x003223, 0x00996A, 0x00A774, 0x00A674, 0x00A774, 0x00A774, 0x003021, 
0x009B6C, 0x00A774, 0x00A674, 0x00A774, 0x00A774, 0x00A774, 0x003827, 0x009F6F, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x001C13, 0x007D56, 
0x009064, 0x007A54, 0x006B4A, 0x00875C, 0x00895F, 0x00996A, 0x00A774, 0x003424, 0x000100, 0x000705, 0x000D08, 0x000906, 0x000402, 0x000704, 0x000604, 0x002015, 
0x00412D, 0x007E57, 0x000906, 0x008F64, 0x01160F, 0x000100, 0x009F73, 0x003428, 0x8CC05D, 0x81A74A, 0x353C0E, 0x000001, 0xC4DA29, 0xC2D92C, 0xB8CE2D, 0x859521, 
0x68751A, 0x839626, 0x7D8F23, 0x4F5B16, 0x111405, 0xC1D82F, 0xC0D72F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xABC12C, 0x202509, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xADC32B, 0x323A0E, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC0D72F, 0xC1D82F, 0xB0C32B, 0x343A0E, 0x010100, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xB1C42B, 0x363A0D, 0x3D440F, 0x73811C, 0x1A1D06, 0x010100, 0xC1D82F, 0xC0D72F, 0xC1D82F, 0xAFC32B, 0x363A0D, 0x3A400E, 0xB1C62B, 0xC1D82F, 
0xA3B427, 0x677118, 0x232708, 0xC1D82F, 0xC1D82F, 0xAFC32B, 0x353A0D, 0x373E0D, 0xB3C92C, 0xC1D82F, 0xC0D72F, 0xC1D82F, 0xC1D82F, 0xADC12A, 0x697419, 0x1E2007, 
0x010100, 0x000406, 0x005789, 0x0079C3, 0x0079C3, 0x0079C3, 0x0079C3, 0x0079C3, 0x0072B4, 0x00334D};

const int blackStartIndexes9[] PROGMEM = {
0, 24, 32, 55, 64, 86, 96, 110, 117, 128, 148, 160, 179, 192, 224, 256, 
289, 291, 315, 322, 354, 386, 419, 422, 457, 489, 520, 551, 562, 582, 592, 595, 
613, 626, 644, 660, 663, 695};

const int blackEndIndexes9[] PROGMEM = {
12, 30, 45, 61, 77, 92, 108, 110, 123, 143, 154, 175, 185, 216, 247, 278, 
289, 310, 315, 351, 382, 415, 420, 447, 479, 511, 543, 560, 575, 588, 593, 607, 
619, 639, 650, 661, 685, 703};

//RLE image data for imageIndex: 10


const uint32_t startupFrame10[] PROGMEM = {
0x003757, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x003F65, 0x000508, 0x00507F, 0x00080D, 0x00619A, 0x007AC2, 
0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007BC2, 0x004165, 0x000508, 0x004F7E, 0x007AC2, 0x00263C, 0x0076BB, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 
0x007BC2, 0x004164, 0x00060A, 0x004F80, 0x007AC2, 0x007AC2, 0x003E61, 0x007AC2, 0x007AC2, 0x007AC2, 0x007BC1, 0x004164, 0x000509, 0x00507F, 0x007AC2, 0x007AC2, 
0x007AC2, 0x000C0F, 0x00827E, 0x009C90, 0x009B92, 0x004D55, 0x000703, 0x006955, 0x009C91, 0x009C91, 0x009C91, 0x009C91, 0x00331E, 0x009C67, 0x005A3D, 0x000906, 
0x006D4C, 0x00A773, 0x00A96F, 0x00A96E, 0x00A96E, 0x00A96E, 0x001B16, 0x000403, 0x000705, 0x006D4C, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 
0x000909, 0x000806, 0x006D4C, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x007E5C, 0x00130D, 0x000705, 0x006445, 0x00A573, 0x009365, 
0x008B60, 0x009D6C, 0x00A06F, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x006F4C, 0x000403, 0x000705, 0x001E15, 0x001C13, 0x00120C, 0x000D09, 0x001911, 0x001F16, 
0x004D35, 0x006F4D, 0x009A6B, 0x04A774, 0x04A774, 0x023524, 0x002318, 0x00A774, 0x00A774, 0x00543A, 0x000100, 0x00A675, 0x00A675, 0x00825B, 0x000808, 0xA5CB4E, 
0xA5CA4E, 0xA6CB4E, 0x7C8F2B, 0x232606, 0x090A02, 0x131707, 0x101306, 0x010101, 0xC5DA27, 0xC5DA27, 0xC4DA28, 0xC2D82E, 0xB4CA2D, 0x99AB25, 0xA8BF2D, 0xA8BF2B, 
0x76851F, 0x0F1105, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC2D82E, 0xC1D82F, 0x68751C, 0x030301, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0x626F19, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x657019, 0x0E1004, 0x454D11, 0x0C0D03, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0x657019, 0x090A02, 0x7F8E1F, 0xC1D82F, 0x91A023, 0x464C10, 0x0C0D03, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x646F18, 0x080802, 
0x7E8D1F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x96A724, 0x495011, 0x080802, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x646F18, 0x0A0B02, 0x7E8D1F, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x97A724, 0x353B0D, 0x001019, 0x006CAB, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 
0x006FB0, 0x002335, 0x002338};

const int blackStartIndexes10[] PROGMEM = {
0, 24, 32, 55, 64, 86, 96, 117, 128, 148, 160, 179, 192, 211, 225, 258, 
291, 323, 355, 357, 388, 425, 458, 490, 520, 551, 560, 582, 594, 613, 628, 644, 
661, 696};

const int blackEndIndexes10[] PROGMEM = {
12, 29, 44, 60, 77, 91, 110, 122, 142, 153, 175, 184, 208, 215, 246, 277, 
309, 350, 355, 383, 415, 447, 479, 511, 543, 556, 575, 587, 607, 618, 639, 649, 
684, 702};

//RLE image data for imageIndex: 11


const uint32_t startupFrame11[] PROGMEM = {
0x00456F, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x00598E, 0x00070C, 0x002032, 0x0071B4, 0x002033, 0x0077BD, 
0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x00598E, 0x00080D, 0x001F31, 0x0071B4, 0x007AC2, 0x004D79, 0x007AC2, 0x007AC2, 0x007AC2, 
0x007AC2, 0x007AC2, 0x007AC2, 0x005C91, 0x000A0F, 0x001E30, 0x0070B2, 0x007AC2, 0x007AC2, 0x00121C, 0x006AA9, 0x0079C3, 0x0079C3, 0x0079C3, 0x007AC2, 0x005C91, 
0x000B10, 0x001D31, 0x006FB2, 0x0079C3, 0x0079C3, 0x0079C3, 0x00293E, 0x0081BA, 0x0081BA, 0x0082B9, 0x005E8E, 0x000A0F, 0x00232A, 0x0077AA, 0x0081BB, 0x0080BA, 
0x0081BB, 0x0081BB, 0x000100, 0x007056, 0x00A57B, 0x007760, 0x000C0B, 0x002B1D, 0x009770, 0x00A47D, 0x00A47B, 0x00A57B, 0x00A57B, 0x00A57B, 0x000706, 0x00140C, 
0x005D42, 0x00100C, 0x002B1E, 0x009B6B, 0x00A773, 0x00A872, 0x00A872, 0x00A872, 0x00A872, 0x00A872, 0x006F50, 0x000E0C, 0x002C1E, 0x009D6D, 0x00A774, 0x00A774, 
0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x008A64, 0x00241B, 0x002E20, 0x009E6E, 0x00A774, 0x00A06F, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 
0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x008D62, 0x00120D, 0x00271B, 0x003B29, 0x002B1D, 0x002418, 0x003323, 0x00412D, 0x006F4D, 0x009366, 0x00A774, 0x00A774, 
0x07A774, 0x07A774, 0x07A774, 0x055F41, 0x000F0A, 0x005D40, 0x00A371, 0x00A675, 0x00A675, 0x00A675, 0x007E59, 0x000001, 0x002418, 0x36AA72, 0x36AA72, 0x36AA72, 
0x35A26D, 0x152D1C, 0xB5D241, 0xB5D241, 0xB5D241, 0xB4D141, 0xA7BF35, 0x535D13, 0x292E0A, 0x394312, 0x2F370E, 0x0F1104, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 
0xC2D82D, 0xC1D82F, 0xBAD02D, 0xC0D730, 0xC0D730, 0x616F1A, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x8FA125, 0x121505, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x91A023, 0x101104, 0x0D0E03, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 
0x909F23, 0x101104, 0x32380C, 0xA3B728, 0x667119, 0x181A05, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x8E9E22, 0x0F1004, 0x31370C, 0xB0C52B, 0xC1D82F, 
0xC1D82F, 0xB4C82B, 0x667119, 0x1C1E06, 0xC1D92F, 0xC1D92F, 0xC1D82F, 0xC1D82F, 0x8E9D22, 0x0D0E03, 0x32380C, 0xB3C92B, 0xC1D82F, 0xC0D82F, 0xC1D92F, 0xC1D92F, 
0xC1D82F, 0xB1C62B, 0x647018, 0x090B02, 0xC0D92F, 0xC1D92F, 0xC2D72F, 0x8F9E23, 0x0D0E03, 0x31390C, 0xB2CA2C, 0xC1D92F, 0xC1D92F, 0xC1D92F, 0xC1D92F, 0xC1D92F, 
0xC0D92F, 0xC0D92F, 0xC1D92F, 0x819220, 0x080B02, 0x000101, 0x003F63, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x005584, 0x000C11, 
0x000001, 0x000101, 0x000508};

const int blackStartIndexes11[] PROGMEM = {
0, 25, 32, 56, 64, 87, 96, 118, 128, 149, 160, 180, 193, 211, 226, 259, 
292, 324, 357, 389, 426, 458, 490, 521, 527, 552, 561, 583, 595, 614, 629, 645, 
662, 696, 698, 702};

const int blackEndIndexes11[] PROGMEM = {
12, 29, 44, 60, 77, 91, 109, 122, 142, 153, 174, 184, 207, 215, 246, 277, 
309, 348, 382, 415, 447, 479, 511, 525, 543, 556, 575, 587, 607, 618, 639, 649, 
684, 696, 700, 702};

//RLE image data for imageIndex: 12


const uint32_t startupFrame12[] PROGMEM = {
0x001F32, 0x0070B3, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x006CAD, 0x001928, 0x004066, 0x007AC2, 0x002A43, 0x007AC2, 
0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x006CAD, 0x001827, 0x004066, 0x007AC2, 0x007AC2, 0x000C13, 0x0069A7, 0x007AC2, 0x007AC2, 
0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x006DAD, 0x001928, 0x004066, 0x007AC2, 0x007AC2, 0x007AC2, 0x00304B, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 
0x006DAD, 0x001A28, 0x004066, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x000202, 0x005180, 0x0078C4, 0x0077C4, 0x0079C3, 0x006DAD, 0x001B28, 0x003D69, 0x0078C4, 
0x0077C4, 0x0077C4, 0x0077C4, 0x0077C4, 0x001219, 0x008698, 0x0093A1, 0x007F96, 0x001B28, 0x00534B, 0x0092A3, 0x0092A3, 0x0092A2, 0x0092A3, 0x0092A3, 0x0092A3, 
0x00462A, 0x009261, 0x002616, 0x00573D, 0x00A773, 0x00A96E, 0x00A96E, 0x00A96E, 0x00A96E, 0x00A96E, 0x00A96E, 0x005138, 0x00694C, 0x000B09, 0x000101, 0x000E0C, 
0x00573D, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A574, 0x00A774, 0x00835F, 0x00211A, 0x000403, 0x005F42, 0x00A774, 
0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x009468, 0x001811, 0x00150E, 0x005339, 0x004B34, 
0x003C29, 0x004E35, 0x005E41, 0x00865D, 0x00A271, 0x00A774, 0x00A774, 0x00A774, 0x08A774, 0x08A774, 0x08A774, 0x08A774, 0x076E4C, 0x000503, 0x00281B, 0x00825A, 
0x00A774, 0x00A774, 0x00A675, 0x00A675, 0x00A675, 0x00A675, 0x008D64, 0x000707, 0x010100, 0x000805, 0x003C29, 0x00885E, 0x54AF6E, 0x54AF6E, 0x54AF6E, 0x54AF6E, 
0x54AE6D, 0x2D4728, 0x000C08, 0xBDD636, 0xBDD636, 0xBDD636, 0xBDD636, 0xBCD637, 0xB7CF33, 0x75841D, 0x4F5914, 0x62711C, 0x485214, 0x0F1104, 0xC2D82D, 0xC2D82D, 
0xC2D82D, 0xC2D82D, 0xC2D92D, 0xC2D82E, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xAABF2C, 0x1A1E07, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xACBF2A, 0x272C0B, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xADC02A, 0x292C0A, 0x010100, 0x505A14, 0x2A2E0A, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xACBF2A, 0x292C0A, 0x657119, 0xC1D82F, 0xB4CA2C, 0x7A871D, 0x252809, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xACBF2A, 0x282B0A, 0x657219, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xB7CD2D, 0x7B881D, 0x1F2107, 0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 0xC0DA2F, 0xADC02A, 
0x282B0A, 0x637519, 0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 0xACC62A, 0x2D370C, 0xE29827, 0xE29927, 0xE39727, 0xC78E24, 0x2A2909, 
0x7C4013, 0xE29827, 0xE29927, 0xE29827, 0xE29827, 0xE29827, 0xE29827, 0xE29827, 0xE29827, 0xE19A27, 0xD58623, 0x4D250B, 0x00456F, 0x007AC2, 0x007AC2, 0x007AC2, 
0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x00598E, 0x00070C, 0x002032, 0x0071B4};

const int blackStartIndexes12[] PROGMEM = {
0, 25, 32, 56, 64, 87, 96, 118, 128, 149, 160, 180, 192, 211, 227, 242, 
260, 293, 325, 358, 360, 390, 427, 459, 490, 521, 528, 552, 562, 583, 596, 614, 
629, 645, 662, 697};

const int blackEndIndexes12[] PROGMEM = {
12, 29, 44, 60, 76, 91, 109, 122, 141, 153, 174, 184, 207, 215, 239, 246, 
276, 308, 346, 358, 380, 414, 447, 479, 511, 524, 543, 556, 575, 587, 607, 618, 
639, 649, 684, 701};

//RLE image data for imageIndex: 13


const uint32_t startupFrame13[] PROGMEM = {
0x002D48, 0x02619A, 0x00598D, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x0077BD, 0x002B45, 0x000B11, 0x025D94, 0x007AC2, 
0x00111B, 0x016AA9, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x0078BE, 0x002A44, 0x000B11, 0x005D94, 0x007AC2, 0x007AC2, 0x00131E, 
0x0076BB, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x0078BF, 0x002B46, 0x000001, 0x000A10, 0x005D94, 0x007AC2, 0x007AC2, 0x0069A7, 0x004E7A, 
0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x0078BF, 0x002C46, 0x00090E, 0x005D94, 0x007AC2, 0x007AC2, 0x007AC2, 0x0069A7, 0x00121B, 0x006FB1, 0x0079C3, 
0x0079C3, 0x0079C2, 0x0078BD, 0x002D45, 0x000911, 0x005D95, 0x0079C3, 0x0079C3, 0x0079C3, 0x0079C3, 0x0079C3, 0x002D45, 0x007FBD, 0x0080BC, 0x007CB9, 0x002C44, 
0x000C0F, 0x00638F, 0x007FBD, 0x007FBD, 0x007FBD, 0x007FBD, 0x007FBD, 0x007FBD, 0x000101, 0x00725B, 0x00A37F, 0x003934, 0x000E09, 0x007E5D, 0x00A380, 0x00A47E, 
0x00A47E, 0x00A47E, 0x00A47E, 0x00A47E, 0x00A47E, 0x000908, 0x00110C, 0x00402F, 0x000504, 0x00140C, 0x003023, 0x000C09, 0x008059, 0x00A774, 0x00A872, 0x00A872, 
0x00A872, 0x00A872, 0x00A872, 0x00A872, 0x00A872, 0x00644A, 0x007354, 0x00A774, 0x007454, 0x00130F, 0x00140E, 0x00865D, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 
0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A170, 0x00A774, 0x00A774, 0x00A774, 0x008B63, 0x00110C, 0x00412D, 0x006D4B, 0x00543A, 0x006243, 0x00714E, 
0x009265, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x09A774, 0x09A774, 0x09A774, 0x09A774, 0x08A774, 0x076646, 0x000100, 0x000C08, 0x003927, 0x009165, 
0x00A774, 0x00A774, 0x00A774, 0x00A575, 0x00A575, 0x00A575, 0x00A575, 0x00A575, 0x008862, 0x000204, 0x00100B, 0x004E36, 0x009265, 0x009E6E, 0x6BB569, 0x6BB569, 
0x6BB569, 0x6BB569, 0x6BB569, 0x6BB468, 0x394E25, 0x000F0A, 0x011A12, 0xC2D92D, 0xC2D92D, 0xC2D92D, 0xC2D92D, 0xC2D92D, 0xC2D82D, 0xBED630, 0x8B9C22, 0x79891F, 
0x859724, 0x454F12, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC0D82F, 0x465013, 0xC1D82F, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xBED52E, 0x454C11, 0x060701, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xBED52E, 
0x474E11, 0x101204, 0x90A123, 0x7B891E, 0x252809, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xBCD32E, 0x454C11, 0x0F1104, 0x93A424, 0xC1D82F, 
0xC1D82F, 0xBCD32E, 0x7A871D, 0x262A09, 0x010100, 0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 0xBCD22E, 0x444C11, 0x0E1504, 0x91A825, 0xBFDB2F, 0xBFDB2F, 
0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 0xBBD62E, 0x5A6A17, 0x41460F, 0xD9B02A, 0xD9B02A, 0xD9B02A, 0xD9AF2A, 0xD3AF29, 0x474910, 0x150503, 0xAA7C1F, 0xD8B12A, 0xD9B02A, 
0xD9B02A, 0xD9B02A, 0xD9B02A, 0xD9B02A, 0xD8B12A, 0xD9B02A, 0x7C5115, 0x020000, 0x070902, 0xF35421, 0xF35421, 0xF35421, 0xEE5420, 0x58180C, 0x010000, 0x130703, 
0xB8491A, 0xF25B22, 0xF35421, 0xF35421, 0xF35421, 0xF35421, 0xF35421, 0xF35421, 0xF35421, 0xF35521, 0xF15F22, 0x924015, 0x040200, 0x001F32, 0x0070B3, 0x007AC2, 
0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x006CAD, 0x001928, 0x004066, 0x007AC2};

const int blackStartIndexes13[] PROGMEM = {
0, 25, 32, 56, 64, 87, 90, 96, 118, 128, 149, 160, 180, 192, 211, 228, 
242, 261, 294, 326, 341, 359, 391, 427, 459, 490, 495, 521, 529, 552, 563, 583, 
596, 614, 630, 645, 648, 663, 697};

const int blackEndIndexes13[] PROGMEM = {
11, 28, 44, 59, 76, 88, 90, 109, 121, 141, 152, 174, 183, 206, 214, 239, 
245, 276, 308, 339, 345, 379, 413, 447, 479, 493, 511, 524, 543, 555, 574, 586, 
606, 617, 638, 646, 648, 684, 701};

//RLE image data for imageIndex: 14


const uint32_t startupFrame14[] PROGMEM = {
0x051826, 0x005E95, 0x0068A5, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x003D61, 0x001D2E, 0x0E70B3, 0x007AC2, 
0x00111B, 0x004E7B, 0x005587, 0x0079C0, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x003E62, 0x001C2C, 0x0270B3, 0x007AC2, 0x007AC2, 
0x000508, 0x0065A1, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x003D61, 0x001C2D, 0x0070B2, 0x007AC2, 0x0072B5, 0x00395C, 0x000305, 
0x006099, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x003D62, 0x001C2D, 0x0071B4, 0x007AC2, 0x007AC2, 0x00446D, 0x00080B, 0x00273D, 0x007AC2, 
0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x003F63, 0x001C2C, 0x0070B2, 0x007AC2, 0x007AC2, 0x007AC2, 0x006099, 0x00060A, 0x000102, 0x004C77, 0x0078C4, 0x0078C4, 
0x007AC2, 0x003F61, 0x001A30, 0x006FB5, 0x0078C4, 0x0078C4, 0x0078C4, 0x0078C4, 0x0078C4, 0x003F68, 0x000D12, 0x00868F, 0x00969C, 0x004759, 0x00261B, 0x008D8B, 
0x00969D, 0x00969C, 0x00969C, 0x00969C, 0x00969C, 0x00969C, 0x008A8D, 0x000100, 0x001912, 0x003720, 0x005437, 0x00271B, 0x009A6B, 0x00A870, 0x00A96E, 0x00A96F, 
0x00A96F, 0x00A96F, 0x00A96F, 0x00A96E, 0x00A870, 0x00694B, 0x005F46, 0x004837, 0x00A171, 0x00563E, 0x000202, 0x002C1E, 0x00A06F, 0x00A774, 0x00A774, 0x00A774, 
0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A06F, 0x00A272, 0x00A774, 0x00A775, 0x006D4E, 0x000302, 0x000E0A, 0x006D4C, 0x007551, 
0x006F4D, 0x007F58, 0x00996A, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x08A774, 0x08A774, 0x08A774, 0x08A774, 0x08A774, 0x08A774, 0x054932, 
0x000201, 0x00100B, 0x003E2A, 0x009366, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 0x007254, 0x00110C, 
0x005339, 0x009265, 0x039E6E, 0x0BA774, 0x7EBB63, 0x7EBB63, 0x7EBB63, 0x7EBB63, 0x7EBB63, 0x7EBB63, 0x7DB55D, 0x3A4619, 0x010100, 0x040602, 0x010101, 0x000B07, 
0x001A12, 0x004D34, 0xC4D929, 0xC4D929, 0xC4D929, 0xC4D929, 0xC4D929, 0xC4DA29, 0xC3D92A, 0xBFD62F, 0x97A925, 0x9EB329, 0x8A9C24, 0x151806, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x65721A, 0x010201, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0x636D18, 0x282D0A, 0x242809, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x626D18, 0x2C310B, 
0xB2C72B, 0xB5CA2C, 0x717D1B, 0x1C1E06, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0D92F, 0xC1D82F, 0x616C18, 0x2C350B, 0xB2CA2B, 0xC0DA2F, 0xC0DA2F, 
0xC0DA2F, 0xB5CE2C, 0x6D7C1B, 0x0A0E03, 0x040401, 0x2E320B, 0x252A09, 0xCACB2D, 0xCACB2D, 0xCACB2D, 0xCACB2D, 0xCACA2D, 0xCACA2D, 0x636C18, 0x31280A, 0xBBB929, 
0xCACB2D, 0xCACB2D, 0xCACB2D, 0xCACB2D, 0xCACB2D, 0xCACB2D, 0x979020, 0x110B03, 0x40470F, 0xB2B628, 0xF06322, 0xF06322, 0xF06322, 0xF06322, 0xF06422, 0x773612, 
0x391608, 0xDD5D1F, 0xF06723, 0xF06322, 0xF06322, 0xF06322, 0xF06322, 0xF06322, 0xF06322, 0xEF6823, 0xBF531B, 0x1E0E04, 0x311807, 0xF15D22, 0xF15D22, 0xF15D22, 
0xF15D22, 0x793012, 0x371608, 0xDF581F, 0xF15E22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15F22, 0xC8501C, 0x210D06, 
0x002D48, 0x02619A, 0x00598D, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x0077BD, 0x002B45, 0x000B11, 0x025D94, 0x007AC2
};

const int blackStartIndexes14[] PROGMEM = {
0, 25, 32, 56, 64, 87, 96, 118, 127, 129, 149, 161, 180, 192, 211, 224, 
228, 242, 262, 295, 327, 341, 359, 395, 428, 460, 490, 496, 521, 530, 552, 564, 
583, 597, 614, 630, 645, 663, 697};

const int blackEndIndexes14[] PROGMEM = {
11, 28, 43, 59, 76, 90, 108, 121, 127, 141, 152, 174, 183, 206, 214, 225, 
239, 245, 276, 307, 339, 344, 378, 412, 447, 479, 493, 511, 524, 543, 555, 572, 
586, 605, 617, 638, 648, 683, 700};

//RLE image data for imageIndex: 15


const uint32_t startupFrame15[] PROGMEM = {
0x050207, 0x1C122D, 0x2B315C, 0x5155A3, 0x5555A5, 0x5555A5, 0x5555A5, 0x5555A5, 0x5555A5, 0x5555A5, 0x5555A5, 0x5456A6, 0x3B2D64, 0x010000, 0x1A2A48, 0x5456A6, 
0x5555A5, 0x00090E, 0x005F97, 0x006AA8, 0x007AC1, 0x007CC4, 0x007CC3, 0x007CC3, 0x007CC3, 0x007CC3, 0x007CC4, 0x007CC3, 0x004F7D, 0x000203, 0x02324F, 0x007AC2, 
0x007BC3, 0x007CC3, 0x000203, 0x02273E, 0x024E7C, 0x057AC1, 0x067AC2, 0x067AC2, 0x067AC2, 0x067AC2, 0x067AC2, 0x067AC2, 0x044D7B, 0x000101, 0x00324F, 0x007AC2, 
0x037AC2, 0x0670B3, 0x032F4A, 0x005E96, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x004E7C, 0x000102, 0x00314E, 0x007AC2, 0x007AC2, 0x00568A, 
0x000D15, 0x005C92, 0x001018, 0x003C5F, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x004E7B, 0x000102, 0x00324F, 0x007AC2, 0x007AC2, 0x007AC2, 0x003A5C, 
0x00619A, 0x00121B, 0x00070B, 0x0064A0, 0x0079C3, 0x0078C4, 0x007AC2, 0x004F7B, 0x000101, 0x003050, 0x0078C4, 0x0078C4, 0x0078C4, 0x0078C4, 0x006EB3, 0x00111E, 
0x000202, 0x001F2F, 0x0085B3, 0x0087B3, 0x005279, 0x000203, 0x003B43, 0x0087B4, 0x0086B4, 0x0086B4, 0x0086B4, 0x0086B4, 0x0086B4, 0x00556D, 0x000303, 0x005D3F, 
0x006C4D, 0x000300, 0x00442F, 0x00A676, 0x00A773, 0x00A773, 0x00A773, 0x00A773, 0x00A773, 0x00A773, 0x00996B, 0x00110D, 0x003327, 0x004431, 0x004735, 0x003226, 
0x00835D, 0x002C21, 0x000201, 0x000303, 0x004731, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A472, 0x002118, 0x00A775, 
0x00A774, 0x00A070, 0x009A6D, 0x00A774, 0x00A473, 0x004230, 0x002D1F, 0x00885F, 0x007E57, 0x00885E, 0x009A6B, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 
0x00A774, 0x003826, 0x06A774, 0x06A774, 0x06A774, 0x06A774, 0x06A674, 0x06A774, 0x06A270, 0x021F15, 0x000604, 0x000403, 0x000201, 0x00120D, 0x003A28, 0x008D62, 
0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x035C40, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 0x004634, 0x000C08, 0x004C34, 0x008C61, 
0x059C6C, 0x00A774, 0x007C58, 0x8CC05D, 0x8CC05D, 0x8CC05D, 0x8CC05D, 0x8CC05D, 0x8CC05D, 0x8BC05D, 0x80A84B, 0x2D330B, 0x0C0E03, 0x111406, 0x040401, 0x000604, 
0x001710, 0x124A31, 0x618C49, 0xC5DA27, 0xC5DA27, 0xC5DA27, 0xC5DA27, 0xC5DA27, 0xC5DA27, 0xC5DA27, 0xC3D92A, 0xBCD32E, 0xABC02B, 0xB5CB2E, 0x434C12, 0x0F0F00, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x7D8C1F, 0x080902, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x7B891E, 0x020100, 0x4F5813, 0x5F6A17, 0x101104, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0x7D8A1E, 0x020201, 0x4D5613, 0xC1D82F, 0xC1D82F, 0xAABF29, 0x596316, 0x0E0F03, 0x020200, 0x020200, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 
0xC0DA2F, 0xC0DA2F, 0xC1D82F, 0x7B891E, 0x020201, 0x4D5A14, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xBFDA2F, 0xC0DA2F, 0xA3B928, 0x242C09, 0x060601, 0x5B6415, 0x7C891D, 
0x616F18, 0xE49226, 0xE49226, 0xE49226, 0xE49226, 0xE49226, 0xE59126, 0x8C691A, 0x000201, 0x612B0E, 0xE59026, 0xE49327, 0xE49226, 0xE49226, 0xE49226, 0xE49226, 
0xE49427, 0xD47E22, 0x3D1B09, 0x0F1204, 0x97741C, 0xE49527, 0xF25621, 0xF25621, 0xF25621, 0xF25621, 0xF25621, 0x9B3515, 0x030000, 0x61260E, 0xF15F22, 0xF25822, 
0xF25621, 0xF25621, 0xF25621, 0xF25621, 0xF25621, 0xF25621, 0xF25A22, 0xE35B20, 0x451B0A, 0x070000, 0x9A3615, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0x983C18, 
0x020100, 0x62270E, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xE85B22, 0x632711, 0x051826, 
0x005E95, 0x0068A5, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x003D61, 0x001D2E, 0x0E70B3, 0x007AC2};

const int blackStartIndexes15[] PROGMEM = {
0, 26, 32, 57, 64, 88, 96, 119, 127, 130, 150, 158, 162, 181, 191, 193, 
212, 223, 229, 243, 262, 274, 295, 328, 342, 360, 396, 428, 460, 491, 497, 522, 
531, 542, 553, 564, 584, 597, 615, 630, 646, 663, 697};

const int blackEndIndexes15[] PROGMEM = {
11, 28, 43, 59, 75, 90, 109, 121, 127, 141, 152, 159, 173, 183, 191, 206, 
214, 227, 239, 245, 271, 276, 307, 339, 342, 377, 411, 446, 479, 493, 511, 524, 
539, 543, 555, 571, 586, 604, 617, 637, 648, 683, 700};

//RLE image data for imageIndex: 16


const uint32_t startupFrame16[] PROGMEM = {
0x020103, 0x36144B, 0x5A217E, 0x642289, 0x68238E, 0x68238E, 0x68238E, 0x68238E, 0x68238E, 0x68238E, 0x68238E, 0x672990, 0x4C226D, 0x060309, 0x3D0E51, 0x68238E, 
0x67278F, 0x181D35, 0x1F3B64, 0x4464AE, 0x4764B0, 0x4764B0, 0x4764B0, 0x4764B0, 0x4764B0, 0x4764B0, 0x4665B1, 0x3A447F, 0x060008, 0x1E4069, 0x4764B0, 0x4665B0, 
0x42579C, 0x004F7D, 0x0069A6, 0x0078BD, 0x007CC4, 0x007CC4, 0x007CC4, 0x007CC4, 0x007CC4, 0x007CC4, 0x005D93, 0x00090D, 0x05466F, 0x007AC2, 0x007CC4, 0x00659F, 
0x00121B, 0x000407, 0x014771, 0x047AC2, 0x047AC2, 0x047AC2, 0x047AC2, 0x047AC2, 0x047AC2, 0x045A8F, 0x01070B, 0x004771, 0x007AC2, 0x0376BC, 0x034872, 0x01090E, 
0x003453, 0x00253B, 0x000508, 0x004974, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x005A90, 0x00060A, 0x004771, 0x007AC2, 0x007AC2, 0x003E63, 0x001C2D, 
0x007AC2, 0x007AC2, 0x001F30, 0x00141F, 0x0073B7, 0x007AC2, 0x007AC2, 0x007AC2, 0x005C91, 0x00070B, 0x004570, 0x007AC2, 0x007AC2, 0x007AC2, 0x005689, 0x000102, 
0x002C47, 0x004770, 0x002234, 0x000406, 0x003654, 0x007CC0, 0x007CBF, 0x005D91, 0x00080B, 0x00476D, 0x007BC1, 0x007BC1, 0x007BC1, 0x007BC1, 0x007BC1, 0x00324C, 
0x002B42, 0x000203, 0x007868, 0x007A6C, 0x00080A, 0x005E44, 0x00A185, 0x00A185, 0x00A184, 0x00A184, 0x00A184, 0x00A185, 0x008269, 0x001514, 0x000504, 0x001914, 
0x00281D, 0x002B21, 0x00281E, 0x005C42, 0x000A08, 0x001008, 0x000D07, 0x000101, 0x006445, 0x00A774, 0x00A872, 0x00A871, 0x00A871, 0x00A871, 0x00A871, 0x00A871, 
0x009D6C, 0x00130E, 0x008A61, 0x00A172, 0x00A774, 0x00996B, 0x009369, 0x00A774, 0x00865F, 0x001510, 0x004F37, 0x009467, 0x008E62, 0x009A6B, 0x00A774, 0x00A774, 
0x00A774, 0x00A774, 0x00A774, 0x00A673, 0x002319, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x007853, 0x000101, 0x000E09, 0x000805, 
0x000704, 0x00120C, 0x003223, 0x007E57, 0x00A774, 0x00A774, 0x01A774, 0x00A774, 0x004530, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 0x00A476, 
0x009D71, 0x00110F, 0x000503, 0x003E2A, 0x00825B, 0x049769, 0x00A774, 0x006749, 0x97C457, 0x97C457, 0x97C457, 0x97C457, 0x97C457, 0x97C457, 0x97C457, 0x97C458, 
0x718831, 0x222505, 0x21260A, 0x141706, 0x000201, 0x00100B, 0x19432B, 0x5A7A3B, 0x090A02, 0xC5DA27, 0xC5DA27, 0xC5DA27, 0xC5DA27, 0xC5DA27, 0xC5DA27, 0xC5DA27, 
0xC5DA27, 0xC2D92D, 0xBCD22E, 0xC0D830, 0x76861F, 0x060600, 0x040401, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 
0xC1D82F, 0x91A123, 0x0E1004, 0x020200, 0x050501, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0x8E9F23, 0x0C0C03, 
0x727F1C, 0x97A925, 0x3E440F, 0x020200, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xC0D92F, 0x909F23, 0x0B0C03, 0x6D7E1B, 0xBFDA2F, 
0xBFDA2F, 0xBFDA2F, 0x94A924, 0x333D0D, 0x040401, 0x272A09, 0x191E06, 0x0A0F03, 0x000501, 0xCEC42C, 0xCEC42C, 0xCEC42C, 0xCEC42C, 0xCEC42C, 0xCEC42C, 0xCFC22C, 
0x969A22, 0x0B0D03, 0x7A6718, 0xCEC42C, 0xCEC42C, 0xCEC42C, 0xCEC42C, 0xCEC42C, 0xCCC02B, 0x513E0F, 0x444B10, 0xB6AF27, 0xBCAC28, 0xA99924, 0xF25C22, 0xF25C22, 
0xF25C22, 0xF25C22, 0xF25C22, 0xF25C22, 0xB54619, 0x0F0002, 0x893613, 0xF06222, 0xF15C22, 0xF25C22, 0xF25C22, 0xF25C22, 0xF25C22, 0xF15E22, 0xF06422, 0x682C0F, 
0x431A09, 0xE95E21, 0xF06222, 0xF15E22, 0xF15E22, 0xF15E22, 0xF15E22, 0xF15E22, 0xB4461B, 0x0E0602, 0x8A3613, 0xF15F22, 0xF15F22, 0xF15E22, 0xF15E22, 0xF15E22, 
0xF15E22, 0xF15E22, 0xF15E22, 0xF15E22, 0xF15F22, 0x772E13, 0x000001, 0x241005, 0x682C0F, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xB2461B, 0x0E0503, 0x8C3714, 
0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F23, 0xAB431A, 0x2C1108, 0x050207, 0x1C122D, 
0x2B315C, 0x5155A3, 0x5555A5, 0x5555A5, 0x5555A5, 0x5555A5, 0x5555A5, 0x5555A5, 0x5555A5, 0x5456A6, 0x3B2D64, 0x010000, 0x1A2A48, 0x5456A6, 0x5555A5};

const int blackStartIndexes16[] PROGMEM = {
0, 26, 32, 57, 64, 88, 96, 119, 127, 131, 150, 157, 163, 181, 190, 195, 
212, 222, 224, 243, 254, 263, 274, 287, 296, 319, 328, 351, 361, 383, 396, 428, 
460, 464, 491, 498, 522, 531, 553, 564, 584, 597, 615, 631, 646, 664, 698};

const int blackEndIndexes16[] PROGMEM = {
11, 28, 44, 59, 76, 90, 108, 121, 127, 141, 152, 158, 173, 183, 190, 206, 
214, 222, 238, 245, 254, 271, 275, 287, 307, 319, 338, 351, 376, 383, 410, 445, 
461, 479, 493, 511, 524, 538, 555, 571, 586, 604, 617, 637, 648, 683, 700};

//RLE image data for imageIndex: 17


const uint32_t startupFrame17[] PROGMEM = {
0x14091C, 0x271238, 0x481F66, 0x642B8F, 0x662C91, 0x662C91, 0x662C91, 0x662C91, 0x662C91, 0x662C91, 0x662C91, 0x662D91, 0x542678, 0x0C0511, 0x060108, 0x4C226D, 
0x662C91, 0x662C91, 0x21062C, 0x4A1E68, 0x5F318C, 0x653293, 0x653293, 0x653293, 0x653293, 0x653293, 0x653293, 0x643594, 0x53297A, 0x0C0511, 0x050106, 0x48266B, 
0x653293, 0x633795, 0x643494, 0x000C13, 0x122A45, 0x0B5183, 0x2A71B8, 0x2E73BC, 0x2E73BC, 0x2E73BC, 0x2E73BC, 0x2E73BC, 0x2D73BC, 0x295E9A, 0x080B13, 0x000509, 
0x175589, 0x3072BB, 0x2D73BC, 0x224371, 0x121021, 0x035282, 0x00273E, 0x005587, 0x0076BB, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x0066A2, 0x000F17, 
0x000508, 0x04588B, 0x007AC2, 0x007AC1, 0x003B5D, 0x002236, 0x005688, 0x000C13, 0x000102, 0x013F64, 0x017AC2, 0x017AC2, 0x017AC2, 0x017AC2, 0x017AC2, 0x0165A1, 
0x000E17, 0x000508, 0x00588B, 0x007AC2, 0x01649E, 0x001726, 0x00111A, 0x0070B3, 0x0067A4, 0x00619A, 0x0067A4, 0x001520, 0x002135, 0x007AC2, 0x007AC2, 0x007AC2, 
0x007AC2, 0x0065A1, 0x000E17, 0x000508, 0x00588B, 0x007AC2, 0x007AC2, 0x004E7C, 0x003554, 0x007AC2, 0x0072B6, 0x006AA8, 0x004C78, 0x000E15, 0x004B76, 0x0078C4, 
0x0079C3, 0x0066A1, 0x000F17, 0x00000A, 0x00558D, 0x0078C4, 0x0077C4, 0x0077C4, 0x0076C3, 0x002139, 0x003757, 0x0078C4, 0x001018, 0x00060A, 0x000B0F, 0x00868E, 
0x007D89, 0x000F17, 0x000803, 0x007166, 0x00969B, 0x00979A, 0x00979A, 0x00979A, 0x00979B, 0x00716F, 0x002A30, 0x00979A, 0x000807, 0x00130F, 0x00130F, 0x00241A, 
0x002E21, 0x002715, 0x001A0D, 0x000906, 0x007A55, 0x00A872, 0x00A96F, 0x00A96F, 0x00A96F, 0x00A96F, 0x00A96F, 0x009D6A, 0x00110D, 0x000400, 0x004128, 0x005A40, 
0x007352, 0x009166, 0x009E6F, 0x008761, 0x009469, 0x00A675, 0x004A36, 0x000705, 0x006E4C, 0x009D6D, 0x009D6D, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 
0x00A472, 0x002117, 0x05A774, 0x05A774, 0x05A774, 0x05A774, 0x05A774, 0x05A774, 0x05A774, 0x05A774, 0x033424, 0x000604, 0x001710, 0x000D09, 0x00120D, 0x002B1E, 
0x006747, 0x00A774, 0x00A774, 0x01A774, 0x00A774, 0x02412D, 0x00A576, 0x00A576, 0x00A576, 0x00A576, 0x00A576, 0x00A576, 0x00A576, 0x00A576, 0x00684B, 0x00291C, 
0x007350, 0x008F64, 0x0BA774, 0x006747, 0xA1C852, 0xA1C852, 0xA1C852, 0xA1C852, 0xA1C852, 0xA1C852, 0xA0C852, 0xA0C852, 0x9EC24C, 0x546018, 0x2E340C, 0x2E350D, 
0x070802, 0x000806, 0x143321, 0x506A31, 0x070801, 0xC4DA28, 0xC4DA28, 0xC4DA28, 0xC4DA28, 0xC4DA28, 0xC4DA28, 0xC4DA28, 0xC4DA28, 0xC4D92A, 0xC1D82F, 0xC1D82F, 
0x9BAF28, 0x0D0F04, 0x010200, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xA1B427, 0x181B06, 0x0D0E03, 
0x202308, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xA0B327, 0x181A06, 0x080902, 0x8C9D22, 0xBAD02D, 0x73801C, 
0x1F2207, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xC0D92F, 0xA1B327, 0x171906, 0x060B02, 0x899D22, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 
0xB9D22D, 0x5C6A17, 0x40460F, 0x616B17, 0x455111, 0x353F0E, 0x3D470F, 0xE49527, 0xE49427, 0xE49527, 0xE49527, 0xE49527, 0xE49527, 0xE49327, 0xBA8321, 0x181805, 
0x0B0001, 0xA85D1B, 0xE39727, 0xE49427, 0xE49427, 0xE49427, 0xE39627, 0xE39527, 0x864414, 0x0E1104, 0x90731B, 0xE39627, 0xE39527, 0xE39727, 0xF35521, 0xF35521, 
0xF35521, 0xF35521, 0xF35521, 0xF35521, 0xC8461C, 0x1E0003, 0x0A0401, 0xAD4418, 0xF25C22, 0xF35521, 0xF35521, 0xF35521, 0xF35521, 0xF35521, 0xF25621, 0xF15E22, 
0x933B15, 0x030101, 0x050000, 0x802B11, 0xCB491D, 0xF25622, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xC84F1E, 0x1C0B05, 0x0A0401, 0xAD4418, 0xF15F22, 
0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xB0451C, 0x240E06, 0x090402, 0x6C2A12, 0xF15F22, 0xF15F22, 0xF15F22, 
0xF15F22, 0xC74F1D, 0x1C0B05, 0x0A0401, 0xAD4418, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 
0xF15F22, 0xE25921, 0x813216, 0x230D06, 0x020103, 0x36144B, 0x5A217E, 0x642289, 0x68238E, 0x68238E, 0x68238E, 0x68238E, 0x68238E, 0x68238E, 0x68238E, 0x672990, 
0x4C226D, 0x060309, 0x3D0E51, 0x68238E, 0x67278F};

const int blackStartIndexes17[] PROGMEM = {
1, 26, 32, 57, 65, 88, 97, 119, 126, 131, 150, 157, 164, 181, 188, 196, 
212, 221, 226, 243, 253, 256, 263, 274, 296, 318, 329, 350, 361, 382, 397, 415, 
429, 447, 460, 464, 491, 498, 522, 531, 553, 564, 584, 598, 615, 631, 646, 665, 
698};

const int blackEndIndexes17[] PROGMEM = {
12, 27, 44, 58, 76, 89, 108, 120, 126, 141, 151, 157, 173, 182, 189, 206, 
213, 221, 238, 244, 253, 257, 271, 275, 306, 319, 338, 351, 376, 383, 410, 415, 
445, 447, 461, 479, 492, 511, 523, 538, 554, 570, 585, 603, 616, 637, 647, 683, 
700};

//RLE image data for imageIndex: 18


const uint32_t startupFrame18[] PROGMEM = {
0x662D91, 0x331648, 0x0A040E, 0x020102, 0x040206, 0x261034, 0x4B216A, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 
0x5B2881, 0x13081A, 0x0E0714, 0x56267B, 0x662D91, 0x662D91, 0x441A5E, 0x0B0510, 0x210E2F, 0x502070, 0x64248B, 0x67268F, 0x67268F, 0x67268F, 0x67268F, 0x67268F, 
0x68258F, 0x672990, 0x5C2982, 0x12091A, 0x0E0010, 0x58207B, 0x67278F, 0x662B90, 0x672B90, 0x433775, 0x110A1A, 0x302856, 0x524C99, 0x594FA1, 0x584FA1, 0x584FA1, 
0x584FA1, 0x584FA1, 0x5851A2, 0x52428E, 0x13071B, 0x050D15, 0x464689, 0x5850A2, 0x574C9D, 0x4D2F76, 0x4D3078, 0x0067A4, 0x00304E, 0x042840, 0x00649E, 0x0075B9, 
0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x006EAF, 0x001825, 0x000E16, 0x0965A1, 0x007AC2, 0x0070B1, 0x002032, 0x00080C, 0x005689, 0x007AC2, 0x005B91, 
0x000305, 0x003859, 0x0079C0, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x006DAD, 0x001623, 0x000F18, 0x0166A3, 0x007AC2, 0x005587, 0x00121D, 0x005587, 0x007AC2, 
0x007AC2, 0x00619A, 0x003D62, 0x003352, 0x000407, 0x002A42, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x006EAE, 0x001623, 0x000E17, 0x0066A2, 0x007AC2, 0x00639D, 
0x002A42, 0x007AC2, 0x007AC2, 0x007AC2, 0x0079C0, 0x0079C0, 0x0068A4, 0x000D14, 0x000203, 0x005B91, 0x0078C4, 0x0078C3, 0x006FAF, 0x001824, 0x000B18, 0x0062A3, 
0x0078C4, 0x0078C4, 0x0074BE, 0x001D33, 0x003656, 0x0078C4, 0x0078C4, 0x003654, 0x002C45, 0x001D2E, 0x000407, 0x001622, 0x0089AB, 0x007CA0, 0x001725, 0x00130E, 
0x00778A, 0x008BAD, 0x008CAC, 0x008CAC, 0x008CAD, 0x006D81, 0x002F3E, 0x008DAB, 0x008DAB, 0x000807, 0x000605, 0x002118, 0x000807, 0x003F27, 0x002516, 0x00160F, 
0x008D62, 0x00A872, 0x00A86F, 0x00A86F, 0x00A86F, 0x00A86F, 0x00A46F, 0x001A13, 0x000905, 0x005F3E, 0x008E61, 0x003E2D, 0x004632, 0x006045, 0x00805C, 0x009165, 
0x007353, 0x009D6E, 0x007E59, 0x00120E, 0x00140E, 0x00865D, 0x00A472, 0x00A674, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x002D1F, 0x003829, 0x00A774, 
0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x007C56, 0x000101, 0x000E0A, 0x001E15, 0x00160F, 0x002419, 0x004F37, 0x009769, 0x00A774, 
0x02A774, 0x00A774, 0x004E36, 0x002419, 0x00A675, 0x00A675, 0x00A675, 0x00A675, 0x00A675, 0x00A675, 0x00A675, 0x00A675, 0x00A474, 0x001C16, 0x00120D, 0x005A3E, 
0x00855C, 0x0CA774, 0x187550, 0x03120C, 0xA8CC4C, 0xA8CC4C, 0xA8CC4C, 0xA8CC4C, 0xA8CC4C, 0xA8CC4C, 0xA8CC4C, 0xA8CC4C, 0xA8CC4C, 0x8BA232, 0x444D0F, 0x475113, 
0x161906, 0x000100, 0x081F14, 0x455B2A, 0x0A0C03, 0x000202, 0xC4D929, 0xC4D929, 0xC4D929, 0xC4D929, 0xC4D929, 0xC4D929, 0xC4D929, 0xC4D929, 0xC4D929, 0xC2D92D, 
0xC1D82F, 0xB2C72C, 0x202409, 0x010100, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xAEC32A, 0x252909, 
0x1B1E07, 0x464E11, 0x050501, 0xC0D92F, 0xC0D92F, 0xC0D92F, 0xC0D92F, 0xC0D92F, 0xC0D92F, 0xC0D92F, 0xC0DA2F, 0xC0D92F, 0xADC12A, 0x242709, 0x161C06, 0xA0B527, 
0xC0D92F, 0x9DB226, 0x485212, 0x000301, 0x0A0B02, 0x060802, 0x050802, 0xC9CC2D, 0xC9CC2D, 0xC9CC2D, 0xC9CC2D, 0xC9CC2D, 0xC9CC2D, 0xC9CC2D, 0xCACA2D, 0xB2B929, 
0x232708, 0x1B1505, 0xAAA726, 0xC9CC2D, 0xC9CC2D, 0xC9CC2D, 0xC9CC2D, 0x89821D, 0x080401, 0x252909, 0x909320, 0x9A9421, 0x847D1C, 0x8B861E, 0xADAB26, 0xF06622, 
0xF06622, 0xF06622, 0xF06622, 0xF06622, 0xF06622, 0xF06522, 0xD75D1F, 0x2B1506, 0x1C0A04, 0xC8541C, 0xEF6923, 0xF06522, 0xF06622, 0xF06522, 0xF06622, 0xEF6A23, 
0xAF4A19, 0x0D0602, 0x301C08, 0xDA6620, 0xEE6D23, 0xEE6D23, 0xEF6A23, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15D22, 0xD95420, 0x2E1107, 0x1B0B04, 
0xC74F1C, 0xF15F22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15D22, 0xF15E22, 0xF15F22, 0xB7481B, 0x1F0C06, 0x180903, 0x5B250E, 0xCC4E1E, 0xEC5B22, 0xF15F22, 
0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xD7551F, 0x2C1107, 0x1D0C04, 0xC84F1C, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 
0xF15F22, 0xF15F22, 0xDC5720, 0x672811, 0x0E0503, 0x0C0503, 0x270F07, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xD7551E, 0x2A1007, 0x1D0C04, 0xC94F1C, 0xF15F22, 
0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F23, 0xD1511F, 0x7C3012, 0x2A1006, 0x14091C, 
0x271238, 0x481F66, 0x642B8F, 0x662C91, 0x662C91, 0x662C91, 0x662C91, 0x662C91, 0x662C91, 0x662C91, 0x662D91, 0x542678, 0x0C0511, 0x060108, 0x4C226D, 0x662C91, 
0x662C91};

const int blackStartIndexes18[] PROGMEM = {
3, 12, 26, 34, 57, 65, 88, 98, 119, 130, 150, 157, 165, 181, 187, 197, 
212, 220, 228, 243, 252, 256, 264, 274, 297, 317, 330, 349, 362, 381, 397, 414, 
429, 446, 460, 465, 491, 499, 508, 522, 532, 553, 565, 584, 598, 615, 632, 646, 
666, 673, 698};

const int blackEndIndexes18[] PROGMEM = {
9, 12, 27, 44, 58, 76, 89, 108, 120, 140, 151, 157, 173, 182, 188, 205, 
213, 220, 238, 244, 252, 259, 271, 275, 306, 318, 338, 350, 375, 382, 409, 414, 
444, 447, 461, 479, 492, 505, 510, 523, 537, 554, 570, 585, 603, 616, 637, 647, 
671, 684, 699};

//RLE image data for imageIndex: 19


const uint32_t startupFrame19[] PROGMEM = {
0x411C5A, 0x662D91, 0x5B277E, 0x2A133C, 0x0C0510, 0x301442, 0x652D90, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 
0x612B89, 0x1B0C26, 0x180A20, 0x5F2985, 0x662D91, 0x662D91, 0x652C8F, 0x5C2882, 0x231031, 0x010001, 0x160A1F, 0x401C5B, 0x642C8E, 0x662D91, 0x662D91, 0x662D91, 
0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x602B89, 0x1A0B24, 0x170B22, 0x5E2A86, 0x662D91, 0x662D91, 0x662D91, 0x67288F, 0x471C63, 0x010000, 0x14061B, 0x4B1967, 
0x622688, 0x67288F, 0x67288F, 0x67288F, 0x67288F, 0x67278F, 0x672A90, 0x5F2B89, 0x1A0C26, 0x16001C, 0x5F2584, 0x662D91, 0x653092, 0x672990, 0x67278F, 0x3C6CB6, 
0x2F4E85, 0x01090E, 0x0A101C, 0x1B436E, 0x3567AB, 0x3C6CB6, 0x3C6CB6, 0x3C6CB6, 0x3C6CB6, 0x3C6CB6, 0x3C64AB, 0x151529, 0x001A29, 0x3366AA, 0x3D6CB6, 0x334F88, 
0x201836, 0x2E3E6F, 0x3C6CB6, 0x007CC3, 0x007BC3, 0x004D7A, 0x001019, 0x004F7D, 0x0074B8, 0x007CC3, 0x007CC3, 0x007CC3, 0x007CC3, 0x0074B8, 0x002133, 0x011928, 
0x0570B2, 0x007BC3, 0x005180, 0x000202, 0x002439, 0x0076B9, 0x007CC3, 0x017AC2, 0x017AC2, 0x00578A, 0x001827, 0x000A11, 0x00253C, 0x017AC2, 0x017AC2, 0x017AC2, 
0x017AC2, 0x0173B7, 0x001E30, 0x001928, 0x0070B3, 0x007AC2, 0x012B45, 0x001019, 0x0072B6, 0x017AC2, 0x017AC2, 0x007AC2, 0x007AC2, 0x0072B6, 0x0077BD, 0x005B91, 
0x000203, 0x00090E, 0x0068A6, 0x0079C3, 0x0079C3, 0x0074B7, 0x002032, 0x00182A, 0x006FB2, 0x0079C3, 0x0079C3, 0x002138, 0x002942, 0x0079C3, 0x0079C3, 0x0079C3, 
0x005A90, 0x005281, 0x004A74, 0x003757, 0x00131E, 0x002538, 0x0083B8, 0x007AB1, 0x001F30, 0x001E23, 0x0079A9, 0x0082B9, 0x0082B9, 0x0082B9, 0x006E98, 0x000201, 
0x002637, 0x0083B8, 0x0083B8, 0x0082B9, 0x000202, 0x000F0B, 0x005842, 0x003025, 0x002318, 0x00986D, 0x00A579, 0x00A677, 0x00A677, 0x00A677, 0x00A678, 0x002F23, 
0x000807, 0x007456, 0x009A70, 0x00A677, 0x003424, 0x002F22, 0x003727, 0x00513B, 0x007252, 0x007C58, 0x00684C, 0x00976A, 0x003829, 0x002419, 0x009668, 0x00A774, 
0x00A773, 0x00A773, 0x00A773, 0x00A773, 0x00A773, 0x004932, 0x004532, 0x00A773, 0x00A774, 0x00A775, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 
0x00A774, 0x002B1E, 0x001A12, 0x002318, 0x002116, 0x003C2A, 0x007954, 0x00A774, 0x01A774, 0x03A774, 0x006949, 0x002A1D, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 
0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x006748, 0x000100, 0x003927, 0x007752, 0x00996A, 0x258E61, 0x030402, 0x051810, 0x12A06F, 0xAECE47, 
0xAECE47, 0xAECE47, 0xAECE47, 0xAECE47, 0xAECE47, 0xAECE47, 0xAECE47, 0xADCE48, 0xAAC943, 0x69761A, 0x576317, 0x2F360D, 0x000D0A, 0x374A23, 0x121507, 0x020402, 
0x89A53B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92A, 0xC3D92C, 0xC1D82F, 0xBFD52E, 0x333A0E, 0x5F6A13, 0xC1D82F, 
0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xB6CC2C, 0x32370C, 0x2D320B, 0x707D1B, 0x202207, 0x545E14, 0xBEDB2F, 
0xBEDB2F, 0xBEDB2F, 0xBEDB2F, 0xBEDB2F, 0xBEDB2F, 0xBEDB2F, 0xBEDB2F, 0xBFDB2F, 0xB6CC2C, 0x31360C, 0x252F0A, 0xAECA2C, 0xBFDB2F, 0xB8D22D, 0x72851C, 0x0C1304, 
0x0D0D03, 0x2F350B, 0x1A2207, 0x0C1404, 0x0F1605, 0x303C0D, 0xA4BE29, 0xDAAC29, 0xDAAD29, 0xDAAD29, 0xDAAD29, 0xDAAD29, 0xDAAD29, 0xDAAD29, 0xDBAC29, 0xCCA828, 
0x33360C, 0x311707, 0xCA9825, 0xD9AE2A, 0xD9AC29, 0xDAAD2A, 0xD9AF2A, 0xB17E20, 0x1C0B04, 0x030401, 0x646216, 0xD5A628, 0xCF9B26, 0xCC9B26, 0xDAAD29, 0xDAAE2A, 
0xF35321, 0xF35321, 0xF35321, 0xF35321, 0xF35321, 0xF35321, 0xF35321, 0xE64E20, 0x3E0008, 0x311307, 0xDD571F, 0xF25721, 0xF35321, 0xF35321, 0xF35321, 0xF35321, 
0xF25A22, 0xCC521D, 0x220D05, 0x69210E, 0xCA4A1C, 0xF25722, 0xF35521, 0xF35421, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xE45A21, 0x3E180A, 
0x321407, 0xDC571F, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xD95620, 0x501F0D, 0x050201, 0x5C240F, 0x913917, 0xA8421A, 
0xAE441A, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xE45A21, 0x3C180A, 0x311307, 0xDD571F, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 
0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xAF451C, 0x4B1D0C, 0x0A0402, 0x2D1207, 0xE85C21, 0xF16021, 0xF15F21, 0xE45A20, 0x3E1909, 0x321406, 0xDC581E, 0xF16021, 
0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xCE521C, 0x783010, 0x1E0C03, 
0x662D91, 0x331648, 0x0A040E, 0x020102, 0x040206, 0x261034, 0x4B216A, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 
0x5B2881, 0x13081A, 0x0E0714, 0x56267B, 0x662D91, 0x662D91};

const int blackStartIndexes19[] PROGMEM = {
4, 12, 26, 35, 44, 57, 67, 88, 99, 119, 131, 150, 165, 181, 187, 198, 
212, 219, 229, 243, 256, 264, 274, 297, 316, 330, 348, 362, 381, 397, 413, 429, 
460, 465, 491, 499, 522, 532, 553, 565, 584, 598, 615, 633, 646, 667, 675, 684, 
698};

const int blackEndIndexes19[] PROGMEM = {
10, 12, 27, 42, 44, 58, 76, 89, 108, 120, 140, 151, 173, 182, 187, 205, 
213, 219, 238, 244, 261, 271, 275, 306, 317, 338, 349, 374, 381, 409, 413, 446, 
461, 478, 492, 504, 523, 536, 554, 570, 585, 603, 616, 639, 647, 671, 681, 684, 
699};

//RLE image data for imageIndex: 20


const uint32_t startupFrame20[] PROGMEM = {
0x180A22, 0x652D90, 0x632C8C, 0x240F31, 0x15091D, 0x030105, 0x010102, 0x190A22, 0x210E2E, 0x602B89, 0x652D91, 0x652D91, 0x652D91, 0x652D91, 0x652D91, 0x652D91, 
0x652D91, 0x652D91, 0x652D91, 0x642C8E, 0x220F2F, 0x210E2E, 0x632C8D, 0x662D91, 0x4A2067, 0x010001, 0x4E226E, 0x672D91, 0x441D5E, 0x12081A, 0x070309, 0x000001, 
0x1F0D2A, 0x57267B, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x642C8E, 0x220F2F, 0x210E2E, 0x652C8E, 0x662D91, 0x662D91, 
0x662D91, 0x21082C, 0x67278F, 0x4A1E68, 0x0C0612, 0x0D0613, 0x411B5B, 0x632589, 0x67278F, 0x67278F, 0x67278F, 0x67278F, 0x67278F, 0x672990, 0x642C8F, 0x210F2F, 
0x21082D, 0x65278C, 0x662B90, 0x662B90, 0x67278F, 0x67278F, 0x413975, 0x5C4A9E, 0x3C2D64, 0x08040C, 0x322352, 0x534693, 0x5B4A9E, 0x5B4A9E, 0x5B4A9E, 0x5B4A9E, 
0x5B4B9F, 0x5A4599, 0x210F30, 0x171D35, 0x584B9C, 0x5B4B9F, 0x533380, 0x522F7B, 0x5B4A9E, 0x5B4A9E, 0x0877BD, 0x007AC2, 0x0066A3, 0x02253B, 0x030D15, 0x005689, 
0x0072B4, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x0078BE, 0x00283F, 0x00253B, 0x1178BF, 0x067AC2, 0x003859, 0x00090F, 0x005485, 0x007AC2, 0x007AC2, 0x007AC2, 
0x007AC2, 0x007AC2, 0x014771, 0x00253B, 0x0078BF, 0x007AC2, 0x007AC2, 0x007AC2, 0x0078BE, 0x00273F, 0x01253B, 0x0279C0, 0x0068A6, 0x002338, 0x004D7A, 0x007AC2, 
0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x00649E, 0x00619B, 0x00314D, 0x000E17, 0x0071B4, 0x007AC2, 0x007AC2, 0x0078BE, 0x00283F, 0x00253B, 0x0077BD, 
0x007AC2, 0x003C60, 0x00131F, 0x0078BF, 0x007AC2, 0x007AC2, 0x007AC2, 0x007BC1, 0x006EAF, 0x0069A5, 0x006099, 0x00507E, 0x001D2E, 0x003451, 0x007DBF, 0x007ABB, 
0x00283F, 0x00273B, 0x0079BB, 0x007CC0, 0x007CC0, 0x0072B0, 0x000E16, 0x00141E, 0x007DBE, 0x007CC0, 0x007CC0, 0x007CC0, 0x00141E, 0x00050C, 0x000004, 0x000201, 
0x000101, 0x006B5E, 0x003635, 0x003424, 0x009E7E, 0x00A185, 0x00A184, 0x00A184, 0x00A184, 0x005140, 0x000001, 0x007968, 0x009D82, 0x00A184, 0x00A184, 0x002E1E, 
0x002418, 0x002017, 0x00291D, 0x004633, 0x006448, 0x005E44, 0x007151, 0x006447, 0x000404, 0x000100, 0x003626, 0x00A371, 0x00A772, 0x00A872, 0x00A872, 0x00A872, 
0x00A872, 0x00714E, 0x004632, 0x00A872, 0x00A872, 0x00A774, 0x00A774, 0x00A674, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x00A774, 0x006648, 0x000100, 
0x00271B, 0x00291C, 0x003021, 0x005A3E, 0x009C6C, 0x00A774, 0x05A774, 0x008B61, 0x000403, 0x002318, 0x00A774, 0x00A774, 0x24A873, 0x24A873, 0x24A873, 0x24A873, 
0x24A873, 0x24A873, 0x24A873, 0x24A873, 0x24A873, 0x259E6C, 0x00110C, 0x001810, 0x015E42, 0x00865D, 0x29A06D, 0x0D1B11, 0x05130C, 0x279F6C, 0x23A873, 0xB2D143, 
0xB2D143, 0xB2D143, 0xB2D143, 0xB2D143, 0xB2D143, 0xB2D143, 0xB2D143, 0xB2D143, 0xB2D043, 0x90A52B, 0x677419, 0x4C5614, 0x000102, 0x223119, 0x1D230D, 0x000001, 
0x869E36, 0xB2D143, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC3D92B, 0xC1D82E, 0xC1D82F, 0x454E12, 0x596312, 
0xC3D92C, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xBCD32E, 0x3F460F, 0x3E460F, 0x95A724, 0x434B10, 
0x030401, 0x636F18, 0xC1D82F, 0xC2D72F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC2D72F, 0xBDD12E, 0x3F460F, 0x3C430F, 0xBBD12E, 
0xC1D82F, 0xC1D82F, 0x98A925, 0x202508, 0x40450F, 0x5A6015, 0x3F460F, 0x3E450F, 0x646F18, 0xB7CD2D, 0xC1D82F, 0xC27320, 0xE98525, 0xE88525, 0xE88525, 0xE88525, 
0xE88525, 0xE88525, 0xE98525, 0xE38424, 0x48360D, 0x491C0A, 0xE47D24, 0xE88725, 0xE88525, 0xE88525, 0xE78926, 0xD36F20, 0x331407, 0x141605, 0xAB721D, 0xE88725, 
0xE88725, 0xE78925, 0xE88625, 0xE88525, 0x71270F, 0xF25922, 0xF25822, 0xF25822, 0xF25822, 0xF25822, 0xF25921, 0xEE5721, 0x4F180B, 0x491D0A, 0xEA5C21, 0xF25A22, 
0xF25822, 0xF25822, 0xF25822, 0xF25822, 0xF25C22, 0xDF581F, 0x441A0B, 0x0D0001, 0x581E0C, 0xC2461C, 0xED5622, 0xF25822, 0xF25922, 0x130703, 0xD7551F, 0xF15F22, 
0xF15F22, 0xF15F22, 0xF15F22, 0xEB5D22, 0x4E1F0C, 0x4A1D0A, 0xEA5C21, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xEF5E23, 
0x8B3715, 0x220D06, 0x070302, 0x250F07, 0x3B170A, 0x672810, 0x63270F, 0xF15F22, 0xF15F22, 0xF15F22, 0xEC5D21, 0x4E1F0C, 0x4A1D0A, 0xE95C21, 0xF15F22, 0xF15F22, 
0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xE55A21, 0x9D3E17, 0x431A09, 0x040101, 0x010000, 0xAF4419, 0xF15F22, 
0xEC5D22, 0x4E1F0B, 0x491D09, 0xEA5D20, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 
0xF16021, 0xF16021, 0xF16021, 0xBE4B1A, 0x6E2C0F, 0x4E1F0A, 0x3C1807, 0x331406, 0x190A04, 0x4D1E0B, 0x411C5A, 0x662D91, 0x5B277E, 0x2A133C, 0x0C0510, 0x301442, 
0x652D90, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x612B89, 0x1B0C26, 0x180A20, 0x5F2985, 0x662D91, 0x662D91
};

const int blackStartIndexes20[] PROGMEM = {
0, 6, 8, 12, 26, 37, 57, 68, 88, 99, 119, 132, 150, 164, 181, 187, 
198, 212, 218, 230, 243, 259, 264, 274, 298, 305, 315, 330, 348, 363, 380, 397, 
412, 429, 460, 466, 491, 499, 522, 532, 553, 565, 584, 599, 608, 615, 634, 646, 
676, 684, 698};

const int blackEndIndexes20[] PROGMEM = {
0, 6, 9, 12, 27, 42, 58, 76, 89, 108, 120, 140, 151, 173, 182, 187, 
205, 213, 218, 238, 244, 262, 270, 275, 303, 306, 316, 337, 348, 374, 380, 408, 
412, 445, 461, 477, 492, 504, 523, 536, 554, 569, 585, 603, 608, 616, 640, 647, 
682, 684, 699};

//RLE image data for imageIndex: 21


const uint32_t startupFrame21[] PROGMEM = {
0x020103, 0x4F236F, 0x5D2984, 0x37194F, 0x1D0F2E, 0x1C0D28, 0x03040B, 0x0B0613, 0x000001, 0x241137, 0x0F0716, 0x311749, 0x602C8F, 0x622D91, 0x622D91, 0x622D91, 
0x622D91, 0x622D91, 0x622D91, 0x622D91, 0x622D91, 0x622D91, 0x622D91, 0x261239, 0x2C133D, 0x662C8F, 0x200E2C, 0x321646, 0x662D91, 0x57267B, 0x110717, 0x030104, 
0x0A040E, 0x040205, 0x14081B, 0x5F2986, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x291239, 0x2C133D, 0x662D91, 
0x662D91, 0x59277D, 0x07030A, 0x0D0512, 0x602A87, 0x5C2882, 0x1D0D28, 0x020102, 0x020102, 0x010102, 0x0E0613, 0x411D5C, 0x642C8E, 0x662D91, 0x662D91, 0x662D91, 
0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x291239, 0x2C143E, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x341749, 0x36134B, 0x672990, 0x35144A, 0x060208, 0x3E1454, 
0x602686, 0x672990, 0x672990, 0x672990, 0x672990, 0x672A90, 0x652F92, 0x281239, 0x2C0E3C, 0x662C91, 0x653092, 0x672B90, 0x67288F, 0x672990, 0x5D2482, 0x00070B, 
0x3161A2, 0x3C6CB6, 0x24416E, 0x000406, 0x030407, 0x1A3D65, 0x3264A7, 0x3B6CB6, 0x3B6CB7, 0x3B6CB7, 0x3B6DB7, 0x3C6CB6, 0x1E2443, 0x0C314F, 0x396EB8, 0x3A64AA, 
0x232244, 0x2A345E, 0x3B6CB7, 0x3B6DB7, 0x3B6DB7, 0x022237, 0x007BC3, 0x007CC3, 0x007BC3, 0x032841, 0x000102, 0x003655, 0x0073B7, 0x007CC3, 0x007CC3, 0x007BC3, 
0x007BC3, 0x00314D, 0x023250, 0x007AC2, 0x00649F, 0x001623, 0x001623, 0x0071B2, 0x007BC3, 0x007CC3, 0x007BC3, 0x004167, 0x017AC2, 0x017AC2, 0x017AC2, 0x004A77, 
0x00385A, 0x000B11, 0x000F17, 0x0176BB, 0x017AC2, 0x017AC2, 0x017AC2, 0x002F4C, 0x003250, 0x007AC2, 0x0169A7, 0x000305, 0x005F97, 0x017AC2, 0x017AC2, 0x017AC2, 
0x017AC2, 0x005B8F, 0x007AC2, 0x007AC1, 0x0076BB, 0x006DAD, 0x005F97, 0x00141F, 0x004369, 0x007AC2, 0x007AC2, 0x00314C, 0x003051, 0x0078C4, 0x0078C4, 0x0076C1, 
0x002037, 0x000102, 0x006BAB, 0x0079C3, 0x0078C4, 0x0078C4, 0x0078C4, 0x00424C, 0x002A3F, 0x001627, 0x000F1A, 0x00070E, 0x000709, 0x00797B, 0x003C45, 0x004433, 
0x009C91, 0x009B93, 0x009B92, 0x009B93, 0x00766B, 0x006868, 0x009B93, 0x009B92, 0x009B92, 0x009B92, 0x002D1D, 0x001F11, 0x00170C, 0x00150D, 0x002015, 0x003F2E, 
0x00573F, 0x004A37, 0x007150, 0x001D15, 0x000900, 0x004932, 0x00A774, 0x00A870, 0x00A870, 0x00A870, 0x00A86F, 0x009867, 0x000A08, 0x000500, 0x00422C, 0x00A870, 
0x00A870, 0x00A870, 0x009569, 0x00A675, 0x00A272, 0x009F70, 0x00A574, 0x00A775, 0x00A774, 0x00A675, 0x00A774, 0x009469, 0x00120D, 0x000504, 0x003323, 0x003122, 
0x00442F, 0x007C56, 0x00A774, 0x04A774, 0x00A774, 0x002117, 0x01150E, 0x00A06F, 0x00A774, 0x00A774, 0x2D9161, 0x34AA72, 0x34AA72, 0x34AA72, 0x34AA72, 0x34AA72, 
0x34AA72, 0x34AA72, 0x34AA72, 0x34A972, 0x1D4C32, 0x000100, 0x003B29, 0x007350, 0x1E9E6C, 0x1F472D, 0x020906, 0x319665, 0x34AA72, 0x34AA72, 0x8DA431, 0xB7D33E, 
0xB6D33E, 0xB6D33E, 0xB6D33E, 0xB6D33E, 0xB6D33E, 0xB6D33E, 0xB6D33E, 0xB6D23F, 0xADC737, 0x7D8C1E, 0x69771C, 0x080902, 0x0D140B, 0x242C11, 0x768A2B, 0xB7D33E, 
0xB6D33E, 0x7A881C, 0xC2D92C, 0xC2D92C, 0xC2D92C, 0xC2D92C, 0xC2D92C, 0xC2D92C, 0xC2D92C, 0xC2D92C, 0xC2D92C, 0xC2D82D, 0xC1D82F, 0x545E15, 0x0E1004, 0x474F0F, 
0xC2D92C, 0xC2D92C, 0x4E5713, 0xC0D92F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0D92F, 0xC1D82F, 0x4C5412, 0x505C14, 0xAFC72B, 
0x677719, 0x141905, 0x050501, 0x69781A, 0xC0DA2F, 0xC0DA2F, 0x1F2107, 0xC5C42C, 0xCBC92D, 0xCBC92D, 0xCBC92D, 0xCBC92D, 0xCBC92D, 0xCBC92D, 0xCBC92D, 0xCACA2D, 
0x4C5412, 0x564B12, 0xCBC92D, 0xCBCA2D, 0xCACA2D, 0xBAB629, 0x3B2F0B, 0x1C1F06, 0x82801D, 0x8A7C1C, 0x7C7119, 0x978F20, 0xC9C72C, 0xCBC92D, 0xCBC92D, 0xAC4718, 
0xF16222, 0xF16222, 0xF16222, 0xF16222, 0xF16222, 0xF16222, 0xF06222, 0x5E280E, 0x62260E, 0xF06622, 0xF06322, 0xF16222, 0xF16222, 0xF06522, 0xE96321, 0x4D1F0B, 
0x381E09, 0xCE5F1E, 0xEF6B23, 0xEF6823, 0xF06222, 0xF16222, 0xEF6222, 0x481C0A, 0xF15E22, 0xF15E22, 0xF15E22, 0xF15E22, 0xF15E22, 0xF15E22, 0x5F240F, 0x62270E, 
0xF15F22, 0xF15E22, 0xF15E22, 0xF15E22, 0xF15E22, 0xF15E22, 0xF15E22, 0xED5E21, 0x702C12, 0x050201, 0x030100, 0x501F0D, 0x9E3D18, 0xB5461B, 0xDC5620, 0xA63F1A, 
0xB0451A, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0x5E250F, 0x62270E, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 
0xF15F22, 0xC34C1E, 0x5F250F, 0x150803, 0x090302, 0x7D3115, 0x2E1207, 0xE95C21, 0xF16020, 0xF15F22, 0x5F260D, 0x62280B, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 
0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xDB581C, 0x8A3811, 0x2E1301, 0x0E0700, 0x050300, 0x321307, 0xEC5D21, 
0x672513, 0xEF4F34, 0x602410, 0x601819, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 
0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4E34, 0xE94A34, 0xD54231, 0xC63C2E, 0xC43930, 0x76231C, 0x270F05, 0x501F0B, 0x180A22, 0x652D90, 0x632C8C, 0x240F31, 0x15091D, 
0x030105, 0x010102, 0x190A22, 0x210E2E, 0x602B89, 0x652D91, 0x652D91, 0x652D91, 0x652D91, 0x652D91, 0x652D91, 0x652D91, 0x652D91, 0x652D91, 0x642C8E, 0x220F2F, 
0x210E2E, 0x632C8D, 0x662D91, 0x4A2067};

const int blackStartIndexes21[] PROGMEM = {
0, 26, 31, 39, 57, 64, 70, 88, 96, 100, 119, 133, 150, 165, 181, 199, 
212, 218, 231, 243, 261, 274, 282, 298, 305, 331, 347, 363, 379, 398, 411, 429, 
432, 460, 466, 473, 491, 499, 512, 522, 532, 544, 553, 566, 576, 584, 600, 608, 
615, 636, 640, 646, 672, 678, 680, 684, 698};

const int blackEndIndexes21[] PROGMEM = {
1, 27, 33, 42, 58, 64, 74, 89, 96, 108, 120, 140, 151, 172, 182, 205, 
213, 218, 238, 244, 270, 275, 282, 303, 306, 337, 347, 373, 379, 408, 412, 430, 
444, 461, 471, 476, 492, 503, 512, 523, 536, 544, 554, 569, 577, 585, 605, 609, 
616, 637, 642, 647, 672, 678, 681, 684, 699};

//RLE image data for imageIndex: 22


const uint32_t startupFrame22[] PROGMEM = {
0x411548, 0x6B1E6C, 0x4B154D, 0x6B175E, 0x61175A, 0x1C071B, 0x491143, 0x400E38, 0x1D091F, 0x5F185B, 0x8F2790, 0x902790, 0x902790, 0x902790, 0x902790, 0x902790, 
0x902790, 0x902790, 0x902790, 0x902790, 0x912790, 0x4D1042, 0x2A1138, 0x09030B, 0x1A0B24, 0x652D91, 0x452066, 0x29133C, 0x00040B, 0x090613, 0x000102, 0x0E0819, 
0x160A20, 0x130A1F, 0x572983, 0x602E91, 0x602E91, 0x602E91, 0x602E91, 0x602E91, 0x602E91, 0x602E91, 0x602E91, 0x612D91, 0x2B1544, 0x35174A, 0x662D91, 0x3B1A54, 
0x030104, 0x542577, 0x652C8F, 0x35174A, 0x010001, 0x060208, 0x0B040E, 0x522474, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 
0x301543, 0x36174B, 0x662D91, 0x662D91, 0x662D91, 0x190B23, 0x290936, 0x67268F, 0x37174D, 0x040205, 0x37164D, 0x612487, 0x67268F, 0x67268F, 0x67268F, 0x67258F, 
0x67268F, 0x662C91, 0x2F1543, 0x37104A, 0x672990, 0x662C91, 0x67268F, 0x67268F, 0x4B1967, 0x000102, 0x444383, 0x584FA1, 0x1C1731, 0x010001, 0x29234A, 0x4E4A93, 
0x5850A2, 0x5850A2, 0x5850A2, 0x5751A2, 0x5850A2, 0x2D1B45, 0x263057, 0x5752A3, 0x52418C, 0x49286D, 0x564C9C, 0x5850A2, 0x5650A2, 0x111324, 0x031A29, 0x007BC3, 
0x007BC3, 0x005E95, 0x01090E, 0x004066, 0x0070B2, 0x007BC3, 0x007BC3, 0x007BC3, 0x007BC3, 0x003A5C, 0x043D61, 0x087AC2, 0x005C91, 0x000D13, 0x004166, 0x007BC3, 
0x007BC3, 0x007BC3, 0x00436A, 0x00395B, 0x007AC2, 0x007AC2, 0x0077BD, 0x012840, 0x001019, 0x000F18, 0x0074B9, 0x007AC2, 0x007AC2, 0x007AC2, 0x003859, 0x013E62, 
0x017AC2, 0x003F65, 0x002C46, 0x007AC2, 0x007AC2, 0x007AC2, 0x007AC2, 0x00629C, 0x005488, 0x007AC2, 0x007AC2, 0x007AC2, 0x0071B4, 0x005384, 0x000102, 0x004F7E, 
0x0078C4, 0x007AC2, 0x003859, 0x003B65, 0x0078C4, 0x0077C4, 0x003B64, 0x004C7B, 0x0078C4, 0x0077C5, 0x0077C5, 0x0077C5, 0x0070BA, 0x001D15, 0x004E63, 0x003F61, 
0x002B46, 0x002238, 0x001625, 0x000E14, 0x008194, 0x004256, 0x004F46, 0x0094A1, 0x0093A1, 0x0093A1, 0x008F98, 0x00110E, 0x004551, 0x0094A0, 0x0094A0, 0x0094A1, 
0x0094A1, 0x0094A0, 0x007451, 0x002617, 0x001002, 0x000A00, 0x000900, 0x00190F, 0x003828, 0x00402E, 0x004D38, 0x003B2A, 0x001507, 0x005A3E, 0x00A773, 0x00A86F, 
0x00A96F, 0x00A96E, 0x00A870, 0x003727, 0x000300, 0x003F27, 0x00A36C, 0x00A96F, 0x00A96F, 0x00A86F, 0x000906, 0x008F64, 0x00A373, 0x009A6C, 0x00986B, 0x00A272, 
0x00A675, 0x00A675, 0x00A675, 0x00A675, 0x003C2B, 0x000D09, 0x003E2A, 0x003D2A, 0x005D41, 0x009A6B, 0x02A774, 0x04A774, 0x00553C, 0x010302, 0x008F64, 0x00A674, 
0x00A674, 0x00A674, 0x020503, 0x369160, 0x40AB71, 0x40AB71, 0x40AB71, 0x40AB71, 0x40AB71, 0x40AB71, 0x40AB71, 0x3FAB71, 0x378657, 0x00150E, 0x00593E, 0x00885E, 
0x2F794F, 0x318055, 0x40AB71, 0x40AB71, 0x40AB71, 0x8DA32E, 0xB9D43B, 0xB9D43B, 0xB9D43B, 0xB9D43B, 0xB9D43B, 0xB9D43B, 0xB9D43B, 0xB9D43B, 0xBAD43B, 0x94A626, 
0x7F8F21, 0x161906, 0x000101, 0x1F2710, 0x060702, 0x59661F, 0xB9D43B, 0xB9D43B, 0xB6D13A, 0x76831B, 0xC2D92D, 0xC2D92D, 0xC2D92D, 0xC2D92D, 0xC2D92D, 0xC2D92D, 
0xC2D92D, 0xC2D92D, 0xC2D82D, 0xC1D82F, 0x626D18, 0x222608, 0x2C3109, 0xC2D92D, 0xC2D92D, 0xAFC429, 0x485011, 0xBFDB2F, 0xBEDB2F, 0xBFDB2F, 0xBFDB2F, 0xBFDB2F, 
0xBFDB2F, 0xBEDB2F, 0xBFDB2F, 0xC1D82F, 0x596316, 0x617319, 0xBFDB2F, 0x889E22, 0x2B360C, 0x020201, 0x181B06, 0x080E03, 0x000401, 0x040A02, 0x687A1A, 0xBFDB2F, 
0xBFDB2F, 0x8A9C22, 0x181705, 0xCAA828, 0xD8B02A, 0xD8B12A, 0xD8B12A, 0xD8B12A, 0xD8B12A, 0xD8B02A, 0xD8B12A, 0x5D5C15, 0x724A14, 0xD8B12A, 0xD8B12A, 0xD7B22A, 
0xD6AD2A, 0x58340E, 0x4E4E11, 0xC09624, 0xBE8C22, 0xC49925, 0xD8B12A, 0xD8B12A, 0xD8B12A, 0x584E12, 0x9D3315, 0xF35421, 0xF35321, 0xF35321, 0xF35321, 0xF35321, 
0xF35322, 0x721F0F, 0x793011, 0xF15D22, 0xF35421, 0xF35321, 0xF35321, 0xF35521, 0xF15F22, 0x682A10, 0x571C0C, 0xBE471B, 0xF25822, 0xF35422, 0xF35421, 0xE04C1E, 
0x140002, 0x331408, 0xEF5E22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0x702C11, 0x793011, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 
0xF15F23, 0x9D3E18, 0x270F07, 0x030101, 0x38160A, 0x53200D, 0x7E3113, 0x7E3116, 0x200C06, 0x913915, 0xF15F22, 0xF15F21, 0xF15F22, 0x6F2C10, 0x7A3110, 0xF15F21, 
0xF15F21, 0xF15F21, 0xF15F21, 0xF15F21, 0xF15F21, 0xF15F21, 0xF15F21, 0xF15F21, 0xF15F21, 0xE95C21, 0xA54117, 0x4B1E0A, 0x070300, 0xB5481B, 0xF15F23, 0x130702, 
0xCF4F21, 0xF15B28, 0x6F2C10, 0x782D16, 0xF15C27, 0xF15C27, 0xF15C27, 0xF15C27, 0xF15C27, 0xF15C27, 0xF15C27, 0xF15C27, 0xF15C27, 0xF15C27, 0xF15C27, 0xF15C27, 
0xF15C27, 0xF15C27, 0xC54A21, 0x873118, 0x6D2814, 0x622213, 0x42160E, 0x3D1809, 0xB14619, 0xD4531E, 0x380B10, 0x68161D, 0x770D23, 0xED2744, 0xED2744, 0xED2644, 
0xED2644, 0xED2644, 0xED2644, 0xED2644, 0xED2644, 0xED2644, 0xED2644, 0xED2644, 0xED2644, 0xED2644, 0xED2644, 0xED2644, 0xED2944, 0xED2B43, 0xED2B43, 0xED2A43, 
0x811B23, 0x0B0402, 0x23061C, 0x76135B, 0xA81B83, 0xB41E8E, 0x74135B, 0x7D1562, 0x941874, 0x450B35, 0x72135A, 0xB41E8E, 0xB51E8E, 0xB51E8E, 0xB51E8E, 0xB51E8E, 
0xB51E8E, 0xB51E8E, 0xB51E8E, 0xB51E8E, 0xB41E8E, 0xB41E8E, 0x620F4B};

const int blackStartIndexes22[] PROGMEM = {
0, 26, 30, 42, 57, 62, 70, 88, 95, 101, 119, 127, 133, 150, 160, 166, 
181, 192, 199, 212, 217, 224, 232, 243, 249, 262, 274, 298, 305, 331, 346, 363, 
378, 384, 398, 411, 416, 429, 432, 448, 460, 466, 480, 491, 499, 512, 522, 532, 
544, 553, 566, 576, 584, 601, 608, 615, 640, 646, 669, 672, 698};

const int blackEndIndexes22[] PROGMEM = {
3, 27, 34, 42, 58, 65, 74, 89, 97, 108, 120, 128, 140, 151, 160, 173, 
182, 192, 205, 213, 217, 224, 238, 244, 249, 270, 275, 303, 306, 337, 346, 373, 
379, 384, 407, 411, 416, 430, 443, 448, 461, 470, 480, 492, 503, 513, 523, 536, 
545, 554, 569, 578, 585, 605, 610, 616, 643, 647, 670, 676, 703};

//RLE image data for imageIndex: 23


const uint32_t startupFrame23[] PROGMEM = {
0x23061C, 0x76135B, 0xA81B83, 0xB41E8E, 0x74135B, 0x7D1562, 0x941874, 0x450B35, 0x72135A, 0xB41E8E, 0xB51E8E, 0xB51E8E, 0xB51E8E, 0xB51E8E, 0xB51E8E, 0xB51E8E, 
0xB51E8E, 0xB51E8E, 0xB41E8E, 0xB41E8E, 0x620F4B, 0x0A050F, 0x67267F, 0x491B5A, 0x3B1444, 0x471449, 0x120615, 0x250B28, 0x1D081D, 0x260F30, 0x301036, 0x792B90, 
0x782B91, 0x782B91, 0x782B91, 0x782B91, 0x782B91, 0x782B91, 0x782B91, 0x782B91, 0x782B91, 0x47164C, 0x3E1A55, 0x230E2E, 0x461F63, 0x652D91, 0x2C133F, 0x0A0510, 
0x000001, 0x000104, 0x120819, 0x050309, 0x512474, 0x632D91, 0x632D91, 0x632D91, 0x632D91, 0x632D91, 0x632D91, 0x632D91, 0x642D91, 0x35184D, 0x3E1B58, 0x662D91, 
0x5A2880, 0x09040D, 0x1F0C2A, 0x662C91, 0x411D5C, 0x0A040E, 0x030104, 0x040206, 0x3B1A54, 0x632B8C, 0x662C91, 0x662C91, 0x662C91, 0x662C91, 0x662C91, 0x662D91, 
0x36184C, 0x3F1B58, 0x662D91, 0x662C91, 0x662C91, 0x391850, 0x4C256E, 0x602E8B, 0x0F0013, 0x2D103E, 0x5C2D85, 0x653192, 0x653192, 0x653192, 0x653193, 0x643493, 
0x35184D, 0x3D205A, 0x643594, 0x652E90, 0x642D8E, 0x653192, 0x5F2E89, 0x0B040F, 0x061826, 0x2E73BB, 0x2E6EB4, 0x0C2A43, 0x113556, 0x2668A9, 0x2F72BB, 0x2F72BC, 
0x2F73BC, 0x2F73BC, 0x1F3860, 0x104975, 0x3072BB, 0x23406C, 0x181E37, 0x2C65A8, 0x2F73BC, 0x2F72BB, 0x113252, 0x003A5C, 0x007BC3, 0x007BC3, 0x00619A, 0x010507, 
0x001725, 0x0071B4, 0x007BC3, 0x007BC3, 0x007BC3, 0x004167, 0x044A75, 0x0077BD, 0x00314D, 0x000508, 0x005D94, 0x007BC3, 0x007BC3, 0x007BC3, 0x00598E, 0x00568B, 
0x007AC2, 0x007AC2, 0x0074B9, 0x0067A4, 0x002940, 0x005A90, 0x0078C4, 0x007AC2, 0x004167, 0x004777, 0x0078C4, 0x0062A1, 0x002033, 0x0078C4, 0x0078C4, 0x0078C4, 
0x0078C4, 0x006DB2, 0x00090F, 0x000F0C, 0x005A7B, 0x00517F, 0x004066, 0x003758, 0x00233B, 0x000008, 0x001723, 0x0086AA, 0x004664, 0x00585F, 0x008BAD, 0x008CAD, 
0x008CAD, 0x003940, 0x001A23, 0x008CAC, 0x008CAC, 0x008CAD, 0x008CAD, 0x008AA9, 0x001A1E, 0x006D4E, 0x00704E, 0x002014, 0x000900, 0x000200, 0x000400, 0x00170C, 
0x003223, 0x003124, 0x004632, 0x000504, 0x002112, 0x000402, 0x006B4A, 0x00A773, 0x00A870, 0x00A870, 0x00A870, 0x007652, 0x003A25, 0x009665, 0x00A86F, 0x00A870, 
0x00A870, 0x002D20, 0x010D0A, 0x00130D, 0x008F64, 0x009A6C, 0x009166, 0x009267, 0x00A171, 0x00A675, 0x00A373, 0x00A675, 0x006A4B, 0x001810, 0x004731, 0x004B34, 
0x007954, 0x00A774, 0x07A774, 0x008F63, 0x000403, 0x00714E, 0x00A675, 0x00A675, 0x00A674, 0x003122, 0x030805, 0x429A63, 0x49AD70, 0x49AD70, 0x49AD70, 0x4AAD70, 
0x4AAD70, 0x4AAD70, 0x4AAD70, 0x4BAB6E, 0x162414, 0x003223, 0x006C4B, 0x2C9262, 0x122013, 0x265C3C, 0x4AAD70, 0x4AAD70, 0x4AAD70, 0x122A1B, 0x010201, 0x97AC2D, 
0xBCD538, 0xBCD538, 0xBCD538, 0xBCD538, 0xBCD538, 0xBCD538, 0xBCD538, 0xBBD538, 0xA9BF2D, 0x91A324, 0x292E0B, 0x0F1308, 0x101307, 0x323910, 0xBBD538, 0xBCD538, 
0xB5CE36, 0x1C2009, 0x7E8C1D, 0xC2D82E, 0xC2D82E, 0xC2D82E, 0xC2D82E, 0xC2D82E, 0xC2D82E, 0xC2D82E, 0xC2D82D, 0xC1D82F, 0x6C791A, 0x030301, 0x3C430F, 0x0B0C03, 
0x101203, 0xB7CC2B, 0xC2D82E, 0xA9BC27, 0x090A02, 0x4E5613, 0xC0D92F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC1D82F, 0x667119, 0x72831C, 
0xC0DA2F, 0xA5BB28, 0x455111, 0x191B06, 0x353A0C, 0x1E2408, 0x1F2608, 0x6A791A, 0xC0DA2F, 0xC0DA2F, 0x7F8E1F, 0x1B1505, 0xD78B25, 0xE59126, 0xE59226, 0xE59226, 
0xE59226, 0xE59226, 0xE59126, 0x745916, 0x8D4715, 0xE49327, 0xE49226, 0xE49427, 0xE59126, 0x773811, 0x0A0D03, 0x8E6B1A, 0xE68E26, 0xE58F26, 0xE49326, 0xE59226, 
0xE49226, 0x4C360D, 0x973214, 0xF25621, 0xF25621, 0xF25621, 0xF25621, 0xF25622, 0x802812, 0x903914, 0xF15D22, 0xF25621, 0xF25621, 0xF25621, 0xF25721, 0xF15E22, 
0x893615, 0x090302, 0x040000, 0x49160A, 0xB13D1A, 0xD2491E, 0xEC5421, 0xC9451D, 0x281006, 0xE95C22, 0xF15F22, 0xF15F22, 0xF15F22, 0x7F3213, 0x903914, 0xF15F22, 
0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xC84F1E, 0x5E250F, 0x120703, 0x090402, 0x1B0B05, 0x712C13, 0x823314, 0x481C0B, 0x7A3012, 
0xF16021, 0xF15F21, 0x803212, 0x913B11, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xDA581C, 
0x893710, 0x301402, 0x160A00, 0x0D0600, 0x030200, 0x180903, 0xD0521D, 0xF15F22, 0xE75B21, 0x050200, 0xAD3727, 0x842C1C, 0x8D2026, 0xEF453A, 0xEF453A, 0xEF453A, 
0xEF453A, 0xEF453A, 0xEF453A, 0xEF453A, 0xEF453A, 0xEF453A, 0xEF453A, 0xEF453A, 0xEF453A, 0xEF453A, 0xEF4639, 0xEC4339, 0xDC3D37, 0xD93937, 0xAB2C2C, 0x210C06, 
0x331407, 0x59230D, 0x270F05, 0x080003, 0x020001, 0x8E0F2A, 0xED1546, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 
0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0B47, 0xE30C44, 0x3F0013, 0x020103, 0x4F236F, 0x5D2984, 0x37194F, 0x1D0F2E, 0x1C0D28, 0x03040B, 
0x0B0613, 0x000001, 0x241137, 0x0F0716, 0x311749, 0x602C8F, 0x622D91, 0x622D91, 0x622D91, 0x622D91, 0x622D91, 0x622D91, 0x622D91, 0x622D91, 0x622D91, 0x622D91, 
0x261239, 0x2C133D, 0x662C8F, 0x200E2C};

const int blackStartIndexes23[] PROGMEM = {
0, 26, 57, 61, 72, 74, 88, 94, 103, 119, 126, 134, 150, 159, 166, 181, 
191, 199, 212, 223, 232, 243, 248, 256, 264, 274, 299, 305, 313, 331, 346, 352, 
364, 378, 384, 398, 410, 416, 429, 433, 448, 460, 466, 479, 491, 499, 511, 522, 
533, 542, 553, 567, 576, 584, 608, 615, 640, 646, 668, 698, 703};

const int blackEndIndexes23[] PROGMEM = {
4, 35, 58, 67, 72, 74, 89, 98, 107, 120, 130, 141, 151, 161, 173, 182, 
193, 205, 213, 225, 238, 244, 248, 256, 270, 275, 303, 305, 313, 337, 346, 352, 
373, 378, 384, 407, 410, 417, 429, 442, 449, 461, 470, 481, 492, 502, 514, 523, 
535, 546, 554, 570, 579, 585, 611, 616, 644, 646, 673, 699, 703};

//RLE image data for imageIndex: 24


const uint32_t startupFrame24[] PROGMEM = {
0x060004, 0x881569, 0xB71D8E, 0xB71D8E, 0xA41A7F, 0xB71D8E, 0x610F4B, 0x610F4B, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 
0xB81C8E, 0xB81C8E, 0xB61D8E, 0x5B0E46, 0x040205, 0x5D1553, 0x6F165E, 0x981C7C, 0x801869, 0x4A0E3D, 0x6F145A, 0x4E0E40, 0x490E3D, 0xA7228F, 0xA7228F, 0xA7228F, 
0xA7228F, 0xA7228F, 0xA7228F, 0xA7228F, 0xA7228F, 0xA7228F, 0xA7228F, 0x691253, 0x040206, 0x0A040C, 0x3A1951, 0x602986, 0x2F1646, 0x160A20, 0x12081B, 0x03030A, 
0x000206, 0x1F0E2F, 0x100718, 0x57277D, 0x642D91, 0x642D91, 0x642D91, 0x642D91, 0x642D91, 0x642D91, 0x642D91, 0x642D91, 0x3C1B56, 0x000001, 0x492067, 0x4D216B, 
0x190B22, 0x662D91, 0x4B216A, 0x09040C, 0x07030A, 0x020103, 0x431D5D, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x662D91, 0x3D1A55, 0x010102, 
0x471F64, 0x662D91, 0x662D91, 0x2A123B, 0x4D1568, 0x581F79, 0x0C0410, 0x2B0F3A, 0x602083, 0x68238E, 0x68238E, 0x68238E, 0x68238E, 0x662B90, 0x3C1B55, 0x020000, 
0x491763, 0x662C91, 0x67288F, 0x68238E, 0x5B1D7C, 0x060006, 0x0D1625, 0x4C5FAC, 0x3A4781, 0x000304, 0x1C233F, 0x425599, 0x4D5EAC, 0x4D5EAC, 0x4D5EAC, 0x4C5FAC, 
0x332E5E, 0x000203, 0x2D4A7E, 0x4E5DAB, 0x3A2A5F, 0x434282, 0x4C5FAC, 0x4D5FAC, 0x192641, 0x003F64, 0x007CC4, 0x007CC3, 0x01304C, 0x002235, 0x006FB0, 0x007CC4, 
0x007CC4, 0x007CC4, 0x004973, 0x000202, 0x065587, 0x0073B6, 0x00283E, 0x002133, 0x0074B8, 0x007CC4, 0x007CC4, 0x005587, 0x015D95, 0x017AC2, 0x017AC2, 0x006099, 
0x00436A, 0x000407, 0x016099, 0x0179C3, 0x017AC2, 0x014872, 0x000003, 0x005287, 0x0079C3, 0x012741, 0x01639F, 0x0179C3, 0x0179C3, 0x0179C3, 0x016BAF, 0x00080D, 
0x000101, 0x000A0C, 0x006595, 0x005F97, 0x005282, 0x004873, 0x002A46, 0x002133, 0x0084B7, 0x004C72, 0x000200, 0x005E77, 0x0084B7, 0x0085B6, 0x006484, 0x000405, 
0x00719B, 0x0086B5, 0x0085B6, 0x0085B6, 0x0083B3, 0x001921, 0x00855E, 0x006346, 0x006547, 0x001B15, 0x000503, 0x00150B, 0x00231A, 0x003124, 0x001510, 0x002F22, 
0x000300, 0x000805, 0x007954, 0x00A677, 0x00A774, 0x00A774, 0x00A475, 0x001B13, 0x002E21, 0x008560, 0x00A774, 0x00A774, 0x00A775, 0x002E21, 0x002A1E, 0x021510, 
0x002117, 0x008F64, 0x008F64, 0x008760, 0x008F66, 0x00A172, 0x00A373, 0x00A675, 0x008F66, 0x00100C, 0x002319, 0x005137, 0x005C40, 0x009265, 0x03A774, 0x00A774, 
0x003626, 0x004530, 0x00A674, 0x00A674, 0x00A674, 0x003324, 0x08120B, 0x4EA568, 0x52AE6E, 0x52AE6E, 0x52AE6E, 0x52AE6E, 0x52AE6E, 0x52AE6E, 0x52AE6E, 0x325834, 
0x020201, 0x000C09, 0x004D36, 0x13835A, 0x2A5939, 0x153220, 0x53AF6E, 0x53AE6E, 0x52AE6E, 0x142E1D, 0x090A03, 0xA5BB2E, 0xBED634, 0xBED634, 0xBED634, 0xBED634, 
0xBED634, 0xBED634, 0xBED635, 0xB9D133, 0xA2B628, 0x3E4610, 0x131708, 0x0F1104, 0xA9BF2F, 0xBED634, 0xB9D034, 0x1F2309, 0x8B9C21, 0xC1D92E, 0xC1D92E, 0xC1D92E, 
0xC1D92E, 0xC1D92E, 0xC1D92E, 0xC1D92E, 0xC1D82E, 0x76841D, 0x080A02, 0x576215, 0x1E2307, 0x9CAF25, 0xC1D92E, 0xA8BD28, 0x0A0B02, 0x5B6215, 0xC5D22E, 0xC5D22E, 
0xC5D22E, 0xC5D22E, 0xC5D22E, 0xC5D22E, 0xC6D12E, 0x727E1C, 0x030200, 0x888D1F, 0xC5D32E, 0xBDC92C, 0x656617, 0x020301, 0x464910, 0x585413, 0x484610, 0x767A1B, 
0xC3D02E, 0xC5D22E, 0x7F891E, 0x241406, 0xE67023, 0xED7323, 0xED7323, 0xED7324, 0xED7323, 0xED7224, 0x8B4B16, 0x020000, 0xA34518, 0xEC7624, 0xED7323, 0xED7524, 
0xEC7624, 0x903D14, 0x221B07, 0xB8651D, 0xEC7824, 0xEC7724, 0xED7223, 0xED7323, 0x47260B, 0x9C3A16, 0xF25C22, 0xF25C22, 0xF25C22, 0xF15C22, 0x8F3515, 0x020000, 
0xA44017, 0xF15F22, 0xF25C22, 0xF25C22, 0xF25C22, 0xF15C22, 0xF15F22, 0xAB431A, 0x250F06, 0x42170A, 0x812F14, 0xA23C17, 0xA93E1B, 0x160604, 0x260F06, 0xE75B21, 
0xF16021, 0xF15F22, 0x8E3815, 0x020100, 0xA44116, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xE85B21, 0x9B3E16, 0x401A08, 
0x020100, 0x7B3013, 0xE15921, 0xAE4519, 0x8F3815, 0x6B2910, 0xF0592A, 0x8E3715, 0x020001, 0xA33A1F, 0xF05A2A, 0xF0592A, 0xF0592A, 0xF0592A, 0xF0592A, 0xF0592A, 
0xF0592A, 0xF0592A, 0xF0592A, 0xF0592A, 0xF05A2A, 0xF0592A, 0xBD4523, 0x862F1A, 0x712717, 0x632016, 0x2D1009, 0x8D3813, 0xC64E1C, 0x933A15, 0xB3461A, 0x030001, 
0x4F0D16, 0x030001, 0xA1122F, 0xED2245, 0xED1F45, 0xED1F45, 0xED1F45, 0xED1F45, 0xED1F45, 0xED1F45, 0xED1F45, 0xED1F45, 0xED1F45, 0xED1F45, 0xED1F45, 0xED1F45, 
0xED2345, 0xED2544, 0xED2544, 0xBD2036, 0x110504, 0x010000, 0x030001, 0xA51131, 0xED1846, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 
0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xB01034, 0x100005, 0x23061B, 0x8C166D, 0xB61D8E, 0x470B37, 0x62104C, 0xB61D8E, 
0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0x8E176F, 0x26061E};

const int blackStartIndexes24[] PROGMEM = {
0, 26, 57, 60, 88, 92, 104, 119, 125, 135, 150, 158, 167, 181, 190, 199, 
212, 222, 233, 243, 248, 255, 257, 264, 274, 287, 293, 299, 319, 332, 345, 351, 
364, 366, 377, 383, 398, 409, 415, 429, 433, 447, 460, 466, 478, 491, 499, 510, 
522, 533, 542, 553, 568, 576, 584, 608, 615, 636, 638, 667, 696};

const int blackEndIndexes24[] PROGMEM = {
5, 36, 57, 68, 88, 99, 107, 119, 131, 141, 150, 162, 173, 181, 194, 205, 
212, 226, 238, 243, 248, 255, 257, 270, 274, 287, 294, 303, 319, 337, 345, 353, 
364, 372, 377, 385, 407, 409, 418, 429, 442, 450, 460, 469, 482, 491, 502, 515, 
522, 536, 547, 553, 571, 580, 584, 612, 615, 636, 646, 680, 703};

//RLE image data for imageIndex: 25


const uint32_t startupFrame25[] PROGMEM = {
0x540D42, 0xB51D8D, 0xB61D8E, 0xB61D8E, 0x410A32, 0x66104F, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 
0x671050, 0x030002, 0x4D0B3A, 0xB71D8E, 0xB61D8E, 0x921771, 0xA61A81, 0x881569, 0x480B37, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 
0xB81C8E, 0xB81C8E, 0xB71D8E, 0x7A135E, 0x010000, 0x3A1443, 0x641D67, 0x541551, 0x69185F, 0x250922, 0x3C0E36, 0x3C0F38, 0x2A0B29, 0x8A278C, 0x8D2890, 0x8D2890, 
0x8D2890, 0x8D2890, 0x8D2890, 0x8D2890, 0x8D2890, 0x8C2890, 0x64185D, 0x06040B, 0x2B1139, 0x16091E, 0x662D91, 0x3E1C5A, 0x0D0817, 0x000204, 0x000001, 0x0E0717, 
0x06030A, 0x3E1D5E, 0x612D91, 0x612D91, 0x612D91, 0x612D91, 0x612D91, 0x612D91, 0x612D91, 0x3D1E5D, 0x040206, 0x4E226E, 0x662D91, 0x1F0D2B, 0x4D1D6A, 0x552477, 
0x120819, 0x010001, 0x2C133E, 0x622889, 0x672990, 0x672990, 0x672990, 0x672990, 0x662C91, 0x421D5D, 0x060006, 0x50206F, 0x662C91, 0x672990, 0x552176, 0x040004, 
0x161328, 0x5F439B, 0x291A3F, 0x1C122C, 0x523B87, 0x5F439A, 0x5F439A, 0x5F439A, 0x5E449B, 0x40235F, 0x010508, 0x473B7D, 0x603F99, 0x582B7F, 0x5F4299, 0x5F439A, 
0x201A37, 0x0E4874, 0x1779C1, 0x0E5C92, 0x000407, 0x002236, 0x076BAA, 0x1679C1, 0x1579C1, 0x1579C1, 0x114E7C, 0x000609, 0x0E5D95, 0x1A6DAF, 0x091C2E, 0x104873, 
0x1579C1, 0x1679C1, 0x105588, 0x000305, 0x0067A4, 0x007AC2, 0x007AC2, 0x023B5F, 0x001622, 0x000102, 0x00629C, 0x007AC3, 0x007AC2, 0x004F7E, 0x000408, 0x035D97, 
0x006BAD, 0x000508, 0x00283F, 0x0079C3, 0x007AC3, 0x007AC3, 0x006FB3, 0x010A11, 0x000806, 0x001018, 0x0072AF, 0x0069A7, 0x006098, 0x005486, 0x001D31, 0x002B43, 
0x0080BC, 0x00517C, 0x000606, 0x00618C, 0x007FBD, 0x007AB4, 0x00161D, 0x003D59, 0x0081BB, 0x007FBD, 0x007FBD, 0x007FBC, 0x001D2A, 0x005D43, 0x007553, 0x00583E, 
0x00553E, 0x00191B, 0x000508, 0x000300, 0x00150C, 0x001D16, 0x001F17, 0x000100, 0x003B32, 0x000302, 0x000F08, 0x00855F, 0x00A47D, 0x00A57B, 0x00A47C, 0x005D46, 
0x001412, 0x00765D, 0x00A57C, 0x00A57B, 0x00A47C, 0x00362A, 0x000D0A, 0x003325, 0x031D15, 0x003424, 0x008B61, 0x00835C, 0x007E5A, 0x008E66, 0x00A072, 0x009B6F, 
0x00A173, 0x003023, 0x003122, 0x00593D, 0x00704C, 0x00A370, 0x08A773, 0x008059, 0x01170F, 0x00A372, 0x00A674, 0x00A674, 0x003E2B, 0x122516, 0x5AB06D, 0x5AB06D, 
0x59B06D, 0x5AB06D, 0x5AB06D, 0x5AB06D, 0x59B06D, 0x4C8951, 0x090900, 0x050601, 0x002419, 0x006244, 0x2D8156, 0x0A0E07, 0x010906, 0x509F62, 0x5BB06D, 0x5AB06D, 
0x1C3923, 0x181C07, 0xB7CE30, 0xBFD732, 0xBFD732, 0xBFD732, 0xBFD732, 0xBFD732, 0xBFD732, 0xBFD733, 0xB0C62C, 0x535E16, 0x0A0B04, 0x070803, 0x7E8E22, 0xBFD732, 
0xBFD732, 0x292E0B, 0x050501, 0xA0B426, 0xC0DB2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC0DA2F, 0xC1D92E, 0x808E1F, 0x010200, 0x0B1103, 0x6E801B, 0x343D0D, 
0x020200, 0x73851C, 0xC0DA2F, 0xB0C52A, 0x0F1103, 0x76731A, 0xCFC32C, 0xCEC32C, 0xCEC32C, 0xCEC32C, 0xCEC32C, 0xCFC22C, 0x7F841D, 0x0B0001, 0x9F8D20, 0xCEC52C, 
0xCEC42C, 0x85701A, 0x050000, 0x181B06, 0x7E701A, 0x856A19, 0x917C1D, 0xC9BE2B, 0xCFC32C, 0x8C891F, 0x351207, 0xF25B22, 0xF25B22, 0xF25B22, 0xF25B22, 0xF25B22, 
0x9B3A16, 0x0B0001, 0xB6491A, 0xF16122, 0xF25B22, 0xF15C22, 0xF06222, 0xA84418, 0x0D0503, 0x3F1F09, 0xB7501B, 0xF06423, 0xF15C22, 0xF25B22, 0x46180A, 0xA74118, 
0xF15F22, 0xF15F22, 0xF15F22, 0x9C3D17, 0x0A0401, 0xB6481A, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xF15F22, 0xCA501D, 0x53200D, 0x090402, 0x270E07, 
0x41190A, 0x732C13, 0x5C240F, 0x270F06, 0x110703, 0x230E06, 0x291006, 0xE85C21, 0xF15F21, 0x9C3D16, 0x0A0500, 0xB54917, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 
0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1601F, 0xCF531B, 0x77300E, 0x251000, 0x0E0700, 0x040200, 0x7C3012, 0xF15F22, 0xE05820, 0xDB5620, 0xC64F1A, 0x642116, 
0x9B3222, 0x090003, 0xB32B2F, 0xEF443B, 0xEF433B, 0xEF433B, 0xEF433B, 0xEF433B, 0xEF433B, 0xEF433B, 0xEF433B, 0xEF433B, 0xEF433B, 0xEF433B, 0xEF443A, 0xE83F3A, 
0xD83837, 0xD53537, 0x521714, 0x240F03, 0x4E1F0B, 0x2D1206, 0x43190B, 0xCE3C32, 0x140006, 0xB51336, 0xED1246, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 
0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0847, 0xED0E47, 0x8D002A, 0x020001, 0x4C0017, 0x460715, 0xEA1845, 0xED1846, 0xED1846, 
0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xEC1846, 0x720C22, 0x040001, 0x411548, 0x6B1E6C, 
0x4B154D, 0x6B175E, 0x61175A, 0x1C071B, 0x491143, 0x400E38, 0x1D091F, 0x5F185B, 0x8F2790, 0x902790, 0x902790, 0x902790, 0x902790, 0x902790, 0x902790, 0x902790, 
0x902790, 0x902790, 0x912790, 0x4D1042, 0x2A1138, 0x09030B};

const int blackStartIndexes25[] PROGMEM = {
0, 26, 58, 88, 91, 107, 119, 124, 136, 141, 150, 157, 167, 181, 189, 200, 
212, 221, 233, 243, 254, 257, 265, 274, 286, 294, 299, 318, 332, 344, 350, 366, 
382, 398, 409, 414, 433, 439, 446, 460, 467, 477, 491, 500, 509, 522, 534, 544, 
553, 570, 576, 584, 608, 635, 640, 665, 672, 698, 702};

const int blackEndIndexes25[] PROGMEM = {
7, 38, 69, 88, 100, 107, 119, 132, 139, 141, 150, 163, 173, 181, 195, 205, 
212, 226, 237, 243, 255, 258, 270, 274, 287, 294, 302, 319, 337, 344, 354, 372, 
386, 406, 409, 418, 437, 441, 451, 460, 469, 483, 491, 502, 516, 522, 536, 548, 
553, 570, 581, 584, 615, 638, 647, 670, 675, 699, 703};

//RLE image data for imageIndex: 26


const uint32_t startupFrame26[] PROGMEM = {
0x23061B, 0x8C166D, 0xB61D8E, 0x470B37, 0x62104C, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0x8E176F, 0x26061E, 0x410A33, 
0xB11C8A, 0xB61D8E, 0xB61D8E, 0x861568, 0x460B36, 0xB61D8D, 0xB71D8E, 0xB71D8E, 0xB71D8E, 0xB71D8E, 0xB71D8E, 0xB71D8E, 0xB71D8E, 0xB71D8E, 0xB51D8D, 0x300724, 
0x300A28, 0x821769, 0xB11E8D, 0x851669, 0x75145D, 0x841668, 0x3B0A2F, 0xAE1F8C, 0xB01F8E, 0xB01F8E, 0xB01F8E, 0xB01F8E, 0xB01F8E, 0xB01F8E, 0xB01F8E, 0xAF1F8E, 
0x7F1563, 0x0A0006, 0x010102, 0x14091C, 0x642884, 0x39174C, 0x290E2E, 0x15081A, 0x0D0510, 0x19091F, 0x16091E, 0x54216B, 0x6D2C91, 0x6D2C91, 0x6E2C91, 0x6E2C91, 
0x6E2C91, 0x6D2C91, 0x6D2C91, 0x501F65, 0x08040E, 0x512371, 0x1A0B24, 0x010000, 0x502370, 0x56267A, 0x0F0716, 0x020104, 0x020103, 0x2E1441, 0x652D91, 0x652D91, 
0x652D91, 0x652D91, 0x652D91, 0x652D91, 0x471F65, 0x09040D, 0x552577, 0x662D91, 0x512372, 0x020103, 0x220B2F, 0x65298D, 0x16031D, 0x1B0925, 0x5A247E, 0x672A90, 
0x672A90, 0x672A90, 0x662F92, 0x462165, 0x0A000B, 0x57297D, 0x662D91, 0x66298F, 0x672B90, 0x260D33, 0x265185, 0x3A6DB7, 0x0B2136, 0x0D1B2D, 0x2E5F9D, 0x3A6DB7, 
0x396DB7, 0x396EB8, 0x2E487C, 0x000B11, 0x2863A1, 0x355491, 0x232547, 0x3765AA, 0x3A6DB7, 0x28538A, 0x020C14, 0x0073B7, 0x007BC3, 0x005A8F, 0x02121D, 0x000102, 
0x00060A, 0x00639E, 0x007BC3, 0x007BC3, 0x005687, 0x000A11, 0x0767A4, 0x004F7E, 0x00080D, 0x00578B, 0x007BC3, 0x007BC4, 0x0075BB, 0x021019, 0x000101, 0x001F31, 
0x007BC1, 0x0072B6, 0x0068A5, 0x004C7A, 0x000307, 0x003553, 0x007DBF, 0x005687, 0x000A10, 0x00669D, 0x007BC1, 0x004469, 0x000A10, 0x007CBD, 0x007BC1, 0x007BC1, 
0x007BC1, 0x00253A, 0x000202, 0x00533C, 0x006246, 0x004A34, 0x004539, 0x001A25, 0x000811, 0x000409, 0x000705, 0x000F0B, 0x001913, 0x000404, 0x004746, 0x000507, 
0x00160B, 0x008D6D, 0x00A087, 0x00A185, 0x00987E, 0x001613, 0x005D55, 0x009D83, 0x00A185, 0x00A185, 0x004439, 0x00130E, 0x003D2B, 0x04241A, 0x004933, 0x00825A, 
0x007452, 0x007855, 0x009067, 0x00966B, 0x009F72, 0x00563E, 0x003E2B, 0x006444, 0x00855A, 0x04A872, 0x00A872, 0x00291D, 0x008158, 0x00A673, 0x00A673, 0x004E37, 
0x244429, 0x61B26B, 0x60B26B, 0x61B26B, 0x61B26B, 0x61B26B, 0x61B26B, 0x61AB65, 0x1D240F, 0x090A00, 0x010100, 0x000302, 0x003D2A, 0x157852, 0x24482C, 0x3B7044, 
0x62B26B, 0x62B26B, 0x284B2D, 0x343A0D, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC1D82F, 0xC0D830, 0xBED52F, 0x68751A, 0x090B03, 0x40480F, 0xC1D82F, 
0xC1D82F, 0x3A410E, 0x151705, 0xB5CD2C, 0xBFDC2F, 0xBFDC2F, 0xBFDC2F, 0xBFDC2F, 0xBFDC2F, 0xC0D92F, 0x899821, 0x020401, 0x111905, 0x849A22, 0x4D5C14, 0x000501, 
0x010100, 0x0B0D03, 0x495712, 0xBFDC2F, 0xB8D12D, 0x1A1D06, 0x9B811E, 0xDAAD2A, 0xD9AE2A, 0xD9AE2A, 0xD9AE2A, 0xDAAC29, 0x91841F, 0x150002, 0xB78621, 0xD8B02A, 
0xD9B02A, 0xA3721D, 0x0F0002, 0x44410E, 0xB28220, 0xB98321, 0xD8A929, 0xDAAD29, 0xA38720, 0x52150B, 0xF35321, 0xF35321, 0xF35321, 0xF35421, 0xAA3618, 0x140503, 
0xC64F1C, 0xF25922, 0xF35321, 0xF35321, 0xF25B22, 0xBC4B1B, 0x240E06, 0x441709, 0xAA3E19, 0xD1471D, 0xEA4F21, 0x56150D, 0x020100, 0xB9491B, 0xF15F21, 0xF15F22, 
0xA74218, 0x140800, 0xC64F1B, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xF16021, 0xE35920, 0x883614, 0x2D1205, 0x381609, 0xAD441B, 0x843413, 0x62270F, 
0x5F260D, 0x311307, 0xED5929, 0xAA421B, 0x140605, 0xC64823, 0xF15A29, 0xF05A29, 0xF05A29, 0xF05A29, 0xF05A29, 0xF05A29, 0xF05A29, 0xF15A29, 0xF15A29, 0xED592A, 
0xAC3E20, 0x712717, 0x612015, 0x3E130E, 0x4E1F0B, 0xC84F1C, 0xAE4519, 0xBB491C, 0xD54F25, 0x050201, 0x3B0B11, 0x0B0003, 0x150007, 0xC11838, 0xED2345, 0xED2045, 
0xED2145, 0xED2145, 0xED2145, 0xED2145, 0xED2145, 0xED2145, 0xED2145, 0xED2145, 0xED2145, 0xED2544, 0xED2744, 0xED2644, 0x68141D, 0x95172B, 0x3F0712, 0x010000, 
0xB61236, 0xED1846, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xED1646, 0xE81645, 0x5F081C, 
0x1C0008, 0x31050F, 0x390611, 0xBA1337, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xBF1338, 
0x380610, 0x540D42, 0xB51D8D, 0xB61D8E, 0xB61D8E, 0x410A32, 0x66104F, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 
0xB61D8E, 0x671050, 0x030002};

const int blackStartIndexes26[] PROGMEM = {
0, 24, 57, 90, 119, 123, 137, 150, 156, 168, 181, 188, 200, 212, 220, 234, 
243, 253, 258, 266, 274, 285, 299, 317, 332, 344, 349, 367, 376, 381, 398, 408, 
413, 434, 439, 445, 460, 467, 476, 491, 500, 508, 522, 534, 543, 553, 576, 602, 
608, 633, 640, 664, 698};

const int blackEndIndexes26[] PROGMEM = {
8, 39, 70, 101, 119, 132, 139, 150, 164, 173, 181, 196, 205, 212, 227, 237, 
243, 256, 259, 270, 274, 287, 302, 320, 337, 344, 355, 371, 376, 387, 406, 408, 
419, 436, 440, 452, 460, 469, 484, 491, 502, 516, 522, 537, 549, 553, 582, 605, 
615, 637, 648, 679, 703};

//RLE image data for imageIndex: 27


const uint32_t startupFrame27[] PROGMEM = {
0x030002, 0x460B36, 0x671051, 0x89166B, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB41D8C, 0x8F176F, 0x430B34, 0x010001, 0x1E0517, 0x8D166E, 0xB61D8E, 
0x76135C, 0x3C092E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0x88166A, 0x200518, 0x25051B, 0xAC1B85, 0xB71D8E, 0xA61A81, 
0xAE1C87, 0x460B35, 0xAA1A83, 0xB91C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB91C8E, 0xB91C8E, 0xB71D8E, 0x78135C, 0x18081C, 0x651B63, 0x6C1860, 0x6F1760, 
0x3A0C32, 0x541147, 0x310B2C, 0x811F77, 0x98268F, 0x98268F, 0x98268F, 0x98268F, 0x98268F, 0x98268F, 0x97268F, 0x791A6A, 0x070004, 0x0F0717, 0x120717, 0x030103, 
0x542577, 0x492169, 0x0A0716, 0x000206, 0x000206, 0x0B0612, 0x2C1644, 0x602E91, 0x602E91, 0x602E91, 0x602E91, 0x602E91, 0x602D91, 0x47226C, 0x000102, 0x0D0613, 
0x5C2983, 0x502371, 0x010002, 0x2E063B, 0x5D227F, 0x14081B, 0x1C0A26, 0x5F2181, 0x68248E, 0x68248E, 0x68238E, 0x672A90, 0x4C226C, 0x020000, 0x100011, 0x5E2683, 
0x672890, 0x68248E, 0x290536, 0x000305, 0x444F92, 0x394079, 0x0F111F, 0x434C8D, 0x515AA8, 0x515AA8, 0x505BA9, 0x423B78, 0x020000, 0x00111B, 0x45589E, 0x473879, 
0x484081, 0x515AA8, 0x3F4B89, 0x000203, 0x031C2C, 0x007BC3, 0x007AC1, 0x022135, 0x000A10, 0x00649E, 0x007CC4, 0x007CC4, 0x005C92, 0x000304, 0x00111A, 0x0768A5, 
0x004166, 0x001F31, 0x0071B3, 0x007CC4, 0x007BC2, 0x021928, 0x003757, 0x007AC2, 0x0079C0, 0x00639D, 0x00253C, 0x003D61, 0x007BC1, 0x005C91, 0x000004, 0x000E1A, 
0x016BAD, 0x0074BB, 0x00060C, 0x004972, 0x0079C3, 0x0079C2, 0x0079C3, 0x003251, 0x000202, 0x004834, 0x004C36, 0x003D29, 0x003C3E, 0x001F34, 0x00101F, 0x000C16, 
0x000808, 0x000D09, 0x000504, 0x00080A, 0x00525B, 0x00070B, 0x001D0F, 0x00927D, 0x009C91, 0x009C90, 0x004F44, 0x003135, 0x00928A, 0x009C90, 0x009C90, 0x005850, 
0x001B14, 0x004531, 0x062C1F, 0x00593D, 0x00724E, 0x006848, 0x007654, 0x008E65, 0x009269, 0x007655, 0x000304, 0x000100, 0x004D35, 0x00714C, 0x009965, 0x08A870, 
0x007C56, 0x004A30, 0x00A771, 0x00A771, 0x006646, 0x3E6C40, 0x67B46A, 0x67B46A, 0x67B46A, 0x68B46A, 0x68B46A, 0x68B46A, 0x384E26, 0x0E0F00, 0x020301, 0x00130D, 
0x00533A, 0x2A734C, 0x050602, 0x19301D, 0x68B46A, 0x69B469, 0x3A663D, 0x5B6615, 0xC2D82E, 0xC2D82E, 0xC2D82E, 0xC2D82E, 0xC2D82E, 0xC2D82E, 0xC1D830, 0x7B8A1F, 
0x020301, 0x0A0B01, 0xAEC228, 0xC2D82E, 0x555F14, 0x32380C, 0xC0DA2F, 0xBFDB2F, 0xBFDA2F, 0xBFDA2F, 0xBFDA2F, 0xC1D92F, 0x91A123, 0x040701, 0x192107, 0x99AF26, 
0x697A1A, 0x0A1003, 0x090A02, 0x1C1F07, 0x0B1003, 0x2E380C, 0xB5CF2C, 0xC0DA2F, 0x2D320B, 0x090802, 0xC38422, 0xE49427, 0xE39527, 0xE39527, 0xE49327, 0xA6791E, 
0x000401, 0x1F0004, 0xC97821, 0xE29827, 0xE29827, 0xBB6B1E, 0x1B0704, 0x040701, 0x7A5B16, 0xD48123, 0xE59126, 0xE49427, 0xBD8021, 0x040501, 0x742410, 0xF25622, 
0xF25621, 0xF25621, 0xB63D19, 0x040000, 0x1F0904, 0xD3541E, 0xF25A22, 0xF35521, 0xF35521, 0xF25B22, 0xD0521E, 0x441B0B, 0x3B1009, 0x812913, 0xA83718, 0x752412, 
0x040001, 0x040101, 0x0C0502, 0xCC501D, 0xF16021, 0xB44719, 0x040200, 0x1E0E00, 0xD3551A, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 0xF1611F, 
0xB94B18, 0x5E260A, 0x120800, 0x100603, 0xCD511E, 0xD7551F, 0xB5481A, 0x9C3F15, 0x40160D, 0xA83823, 0x060300, 0x1E0009, 0xD13934, 0xEF4739, 0xEF4639, 0xEF4639, 
0xEF4639, 0xEF4639, 0xEF4639, 0xEF4639, 0xEF4639, 0xEF4739, 0xEF4739, 0xD93D36, 0xC83433, 0xA82A2C, 0x2B0F08, 0x52200B, 0x50200B, 0x501F0C, 0xC43C2E, 0x140306, 
0x26000B, 0xD4163F, 0xED0E47, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0C47, 0xEB1146, 0x520019, 
0x4C0017, 0x3B0611, 0x370610, 0xD1153E, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xC9143B, 
0x380610, 0x010000, 0x060102, 0x0F0204, 0x760C23, 0xD1153E, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xCF153D, 0x730C22, 0x0D0104, 
0x060004, 0x881569, 0xB71D8E, 0xB71D8E, 0xA41A7F, 0xB71D8E, 0x610F4B, 0x610F4B, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 
0xB81C8E, 0xB81C8E, 0xB61D8E, 0x5B0E46};

const int blackStartIndexes27[] PROGMEM = {
0, 23, 56, 88, 122, 139, 155, 169, 187, 200, 220, 233, 252, 266, 284, 300, 
316, 333, 343, 348, 367, 380, 398, 400, 412, 434, 444, 467, 476, 500, 508, 510, 
535, 542, 575, 601, 607, 632, 639, 663, 698};

const int blackEndIndexes27[] PROGMEM = {
9, 40, 71, 102, 133, 139, 165, 173, 196, 205, 228, 237, 260, 270, 288, 302, 
321, 336, 343, 356, 371, 388, 398, 407, 420, 436, 452, 468, 485, 502, 508, 517, 
536, 550, 584, 604, 616, 636, 649, 677, 703};

//RLE image data for imageIndex: 28


const uint32_t startupFrame28[] PROGMEM = {
0x090107, 0x3B092D, 0x63104D, 0x7C1461, 0x841567, 0x7B1460, 0x600F4B, 0x340828, 0x070105, 0x050104, 0x580E44, 0x7A135F, 0x6C1153, 0xB61D8E, 0xB61D8E, 0xB61D8E, 
0xB61D8E, 0xB61D8E, 0xB61D8E, 0x9B1979, 0x4A0C3A, 0x010001, 0x1D0416, 0x911770, 0xB61D8E, 0xA91B84, 0x350829, 0xAA1B84, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 
0xB61D8E, 0xB61D8E, 0xB61D8E, 0x88166A, 0x12030E, 0x160411, 0x811666, 0xB41E8E, 0x86166A, 0x981978, 0x520D40, 0x921874, 0xB31E8E, 0xB41E8E, 0xB41E8E, 0xB41E8E, 
0xB41E8E, 0xB41E8E, 0xB21E8E, 0x921773, 0x0F010A, 0x040207, 0x5A2373, 0x421850, 0x320E33, 0x150717, 0x180719, 0x1C0A22, 0x451852, 0x752B91, 0x752B91, 0x752B91, 
0x752B91, 0x752B91, 0x742B91, 0x602272, 0x070105, 0x130A1F, 0x441D5F, 0x030104, 0x38154D, 0x56257B, 0x0D0614, 0x020103, 0x1A0C26, 0x61288A, 0x652990, 0x652A90, 
0x652990, 0x642C91, 0x4E2472, 0x020004, 0x13041B, 0x612988, 0x672A90, 0x2E103E, 0x0A0912, 0x593E91, 0x1F122F, 0x0D0915, 0x4E357D, 0x604199, 0x604199, 0x5F439A, 
0x4D2D76, 0x050002, 0x0E1220, 0x584091, 0x5C2D86, 0x604099, 0x533B87, 0x040408, 0x0A3250, 0x1A78C0, 0x094A76, 0x010B11, 0x0E619A, 0x1879C1, 0x1779C1, 0x155E97, 
0x000407, 0x001825, 0x1668A7, 0x123556, 0x103F66, 0x1779C1, 0x1978C1, 0x07263D, 0x005587, 0x007AC2, 0x0073B7, 0x024268, 0x000203, 0x00446C, 0x007AC3, 0x006098, 
0x000308, 0x001326, 0x0472BC, 0x004777, 0x000910, 0x0077C0, 0x0078C5, 0x0078C5, 0x004470, 0x000202, 0x003E2D, 0x003828, 0x003223, 0x003C4E, 0x002541, 0x001B31, 
0x00121E, 0x000404, 0x000504, 0x000D12, 0x005A6D, 0x00080E, 0x002616, 0x00938D, 0x00969C, 0x008B89, 0x001D1E, 0x007983, 0x00979A, 0x00979A, 0x006E6E, 0x00271C, 
0x024934, 0x023525, 0x006242, 0x006241, 0x005F41, 0x007A57, 0x008661, 0x008561, 0x001813, 0x000601, 0x00593E, 0x007F54, 0x03A76D, 0x00A870, 0x002B1D, 0x021205, 
0x009E6A, 0x00A770, 0x008258, 0x5C9958, 0x6EB568, 0x6DB568, 0x6EB668, 0x6EB668, 0x6DB568, 0x537A3F, 0x171900, 0x050601, 0x000100, 0x00271B, 0x126747, 0x204028, 
0x599758, 0x70B668, 0x51864D, 0x89991E, 0xC2D92C, 0xC2D92C, 0xC2D92C, 0xC2D92C, 0xC2D92C, 0xC1D82E, 0x8C9D23, 0x040501, 0x0C0E03, 0x738019, 0xC2D92C, 0x77851A, 
0x5E6616, 0xC3D52E, 0xC3D52E, 0xC3D52E, 0xC3D52E, 0xC4D42E, 0x9AA925, 0x070B02, 0x252709, 0xACBC29, 0x879120, 0x181906, 0x212207, 0x37340C, 0x33330B, 0x9CA925, 
0xC3D52E, 0x4B5111, 0x261706, 0xE57823, 0xEC7A24, 0xEB7A24, 0xEC7924, 0xB7651D, 0x060802, 0x2E0806, 0xDA6B21, 0xEB7D24, 0xEA7F25, 0xCF631F, 0x2C1006, 0x171505, 
0x9D5C19, 0xE97C25, 0xEB7B24, 0xD97221, 0x0E0A03, 0x9A3716, 0xF25B21, 0xF25B21, 0xBF461B, 0x090001, 0x2B0F05, 0xDE581E, 0xF15D21, 0xF25B21, 0xF25B21, 0xF15E21, 
0xE15920, 0x6D2B10, 0x170903, 0x220905, 0x48180A, 0x812E14, 0x511F0C, 0x2A1107, 0x2A1106, 0x1D0C04, 0xE25624, 0xC14A1E, 0x080400, 0x2B1008, 0xDE5524, 0xF15C26, 
0xF15C26, 0xF15C26, 0xF15C26, 0xF15C26, 0xF15C26, 0xF15C26, 0xE05624, 0x8F3618, 0x4D1C0F, 0x3C140D, 0x1A0806, 0x933A15, 0xD7551E, 0xB9491B, 0xC94C21, 0x020100, 
0x360D0E, 0x150606, 0x2E000E, 0xD9223E, 0xED2A43, 0xED2844, 0xED2844, 0xED2844, 0xED2844, 0xED2844, 0xED2844, 0xED2844, 0xED2943, 0xEE2C43, 0xED2B43, 0xE42840, 
0x360D0E, 0x010100, 0x0A0401, 0x871B26, 0x2C050D, 0x050002, 0xC11439, 0xED1646, 0xED1446, 0xED1446, 0xED1446, 0xED1446, 0xED1446, 0xED1446, 0xED1446, 0xED1446, 
0xED1446, 0xED1446, 0xD1123E, 0x370010, 0x130006, 0x1C0308, 0x23040A, 0x9C102E, 0xEA1845, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 
0xE61744, 0x910F2B, 0x160207, 0x2E050D, 0x7B0C24, 0xB21234, 0xCC153C, 0xD3153E, 0xCA143C, 0xAE1233, 0x740C22, 0x26040B, 0x030002, 0x460B36, 0x671051, 0x89166B, 
0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB41D8C, 0x8F176F, 0x430B34, 0x010001};

const int blackStartIndexes28[] PROGMEM = {
0, 21, 55, 88, 120, 154, 170, 186, 201, 219, 233, 251, 267, 283, 300, 315, 
333, 347, 367, 370, 375, 379, 400, 411, 434, 443, 467, 475, 501, 509, 542, 571, 
574, 600, 606, 631, 661, 695};

const int blackEndIndexes28[] PROGMEM = {
11, 41, 72, 103, 134, 166, 172, 197, 205, 229, 237, 261, 270, 289, 302, 322, 
336, 357, 368, 371, 375, 389, 407, 421, 436, 453, 468, 486, 502, 518, 551, 571, 
584, 603, 617, 651, 681, 703};

//RLE image data for imageIndex: 29


const uint32_t startupFrame29[] PROGMEM = {
0x040103, 0x080106, 0x040103, 0x13030F, 0x4F0D3D, 0x811565, 0x9A1978, 0x9F197C, 0x971876, 0x7E1463, 0x4C0C3C, 0x11030D, 0x090107, 0x681151, 0xA0197D, 0x4E0C3C, 
0xAF1C88, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xA81B83, 0x530D41, 0x040103, 0x14020E, 0x971775, 0xB71D8E, 0xB71D8E, 0x5B0E46, 0x8F166E, 0xB81C8E, 
0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB71D8E, 0x66104F, 0x0B040E, 0x5D185A, 0x7E1A6B, 0x641354, 0x511043, 0x460E3C, 0x68175D, 0x9C258F, 0x9C258F, 
0x9C258F, 0x9C258F, 0x9C258F, 0x9B258F, 0x881D76, 0x15010E, 0x11081A, 0x050207, 0x451D61, 0x482069, 0x00050F, 0x000103, 0x06050E, 0x1C0E2C, 0x602C8F, 0x612D91, 
0x612D91, 0x612D91, 0x612D91, 0x4F2678, 0x000308, 0x170B23, 0x652C8F, 0x331648, 0x1A0924, 0x5A247D, 0x0E0112, 0x0D0511, 0x542377, 0x662B90, 0x662B90, 0x662F92, 
0x542779, 0x070007, 0x1A0B25, 0x642E90, 0x672990, 0x602888, 0x0C0110, 0x214978, 0x3168AD, 0x000D15, 0x04080E, 0x295690, 0x386FB8, 0x376FB9, 0x325895, 0x070007, 
0x001F30, 0x2F62A3, 0x262E54, 0x335D9E, 0x376FB8, 0x163557, 0x010106, 0x006FB1, 0x007BC3, 0x005384, 0x01121D, 0x004973, 0x007AC4, 0x0066A1, 0x00070E, 0x001B31, 
0x0771BC, 0x001D31, 0x003B5F, 0x0079C5, 0x0079C6, 0x005891, 0x000302, 0x003224, 0x00261A, 0x002C27, 0x014366, 0x002F52, 0x002642, 0x000911, 0x00131B, 0x006280, 
0x000B14, 0x002E21, 0x00919D, 0x0091A5, 0x004748, 0x004454, 0x0091A5, 0x0191A4, 0x01808F, 0x000707, 0x003325, 0x054834, 0x00402D, 0x005E3F, 0x005337, 0x005F41, 
0x007957, 0x00835F, 0x003327, 0x000C06, 0x006647, 0x008E5E, 0x07A96F, 0x00865C, 0x006F48, 0x00A770, 0x009968, 0x000E0A, 0x111A0E, 0x73B766, 0x74B766, 0x74B766, 
0x74B766, 0x74B766, 0x6A9E54, 0x272B09, 0x090A02, 0x000100, 0x000403, 0x003C2A, 0x246744, 0x040502, 0x30512E, 0x76B866, 0x69A55C, 0x060B07, 0x0F1003, 0xB1C626, 
0xC2DB2B, 0xC2DB2B, 0xC2DB2B, 0xC1DA2B, 0xC2D92D, 0x9BAD27, 0x090D03, 0x161C06, 0x040701, 0x272E07, 0xC2DB2B, 0x9BAE21, 0x909320, 0xCACB2D, 0xCACB2D, 0xCACB2D, 
0xCBC92D, 0xA3AB26, 0x0B1103, 0x352B0A, 0xC0BE2B, 0xA49E24, 0x2A2108, 0x030501, 0x4A430F, 0x5C4911, 0x8C841E, 0xCACA2D, 0x707419, 0x56240C, 0xF06422, 0xF06422, 
0xF06422, 0xC6531D, 0x0E0602, 0x391108, 0xE66221, 0xF06723, 0xEF6923, 0xDE5E1F, 0x41190A, 0x2D1C07, 0xA55019, 0xDE6321, 0xE35F21, 0x2C1207, 0x050001, 0xC04A1B, 
0xF15E21, 0xC64D1C, 0x0E0500, 0x391703, 0xE75D1E, 0xF1601F, 0xF15F1F, 0xF15F1F, 0xF1601F, 0xEE601F, 0x9B3E14, 0x3E1A05, 0x020000, 0x5B220E, 0xB0451A, 0x7B3012, 
0x6C2B0E, 0x010100, 0x38150A, 0xB84223, 0x120800, 0x380A10, 0xE54934, 0xEF4E35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4D35, 0xEF4E34, 0xEF4D35, 0xBF3A2D, 
0xA62D2A, 0x6D1C1C, 0x3C1708, 0x843413, 0x6A2A0E, 0xC24128, 0x150506, 0x3D0012, 0xE81845, 0xED0C47, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 
0xED0047, 0xED0047, 0xED1346, 0xE01642, 0x3B0611, 0x390012, 0x31050F, 0x380610, 0xC5143A, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 
0xED1846, 0xED1846, 0xAF1234, 0x21030A, 0x030001, 0x070102, 0x5D091B, 0xB41235, 0xDF1742, 0xED1846, 0xED1846, 0xEC1846, 0xDA1641, 0xA81132, 0x4C0817, 0x190307, 
0x32050F, 0x3B0611, 0x2E050E, 0x140206, 0x090107, 0x3B092D, 0x63104D, 0x7C1461, 0x841567, 0x7B1460, 0x600F4B, 0x340828, 0x070105};

const int blackStartIndexes29[] PROGMEM = {
0, 18, 53, 87, 119, 153, 172, 185, 202, 218, 234, 250, 267, 282, 299, 315, 
333, 342, 347, 367, 370, 379, 401, 410, 434, 442, 467, 474, 501, 509, 541, 568, 
573, 599, 605, 629, 659, 693};

const int blackEndIndexes29[] PROGMEM = {
14, 43, 73, 104, 135, 167, 172, 198, 205, 230, 237, 261, 270, 290, 302, 323, 
336, 342, 357, 368, 370, 389, 406, 422, 435, 454, 468, 486, 502, 519, 553, 570, 
585, 603, 618, 653, 683, 703};

//RLE image data for imageIndex: 30


const uint32_t startupFrame30[] PROGMEM = {
0x0B0209, 0x1C0416, 0x22051A, 0x180413, 0x060104, 0x2C0722, 0x590E45, 0x991877, 0xB21C8B, 0xB41D8C, 0xAF1C88, 0x9B1979, 0x6A1152, 0x200518, 0x0F020C, 0x79135E, 
0xB61D8E, 0x560E42, 0x8F1770, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB11C8A, 0x600F4B, 0x060104, 0x0B0208, 0x7E1563, 0xB41E8E, 0x941974, 0x78135E, 
0x74135C, 0xB41E8E, 0xB41E8E, 0xB41E8E, 0xB41E8E, 0xB31E8D, 0xB31E8E, 0x9F197D, 0x0F010A, 0x000102, 0x4F1F67, 0x43174D, 0x2B0B2A, 0x120513, 0x1E0920, 0x34113C, 
0x772B91, 0x762B91, 0x772B91, 0x772B91, 0x762B91, 0x69257B, 0x10030D, 0x210F31, 0x35174A, 0x2D023A, 0x4F1D6D, 0x05030A, 0x0C0512, 0x56207A, 0x66248E, 0x66238E, 
0x65288F, 0x55287D, 0x08000B, 0x20062C, 0x672990, 0x68238E, 0x16001B, 0x000304, 0x405295, 0x222E52, 0x040509, 0x38467F, 0x4E5DAB, 0x4D5EAC, 0x474A8E, 0x0B000A, 
0x0B263D, 0x464D90, 0x413875, 0x4E5DAB, 0x2E3D6D, 0x021929, 0x007BC3, 0x006EAE, 0x031D2E, 0x004C79, 0x007BC4, 0x006BA9, 0x000B14, 0x00243F, 0x0061A0, 0x001A2A, 
0x00629F, 0x007AC6, 0x006CAF, 0x01070C, 0x000302, 0x00261B, 0x00160C, 0x00333F, 0x014C7C, 0x013B64, 0x00213A, 0x011925, 0x026890, 0x010F19, 0x01352F, 0x018DAB, 
0x017F99, 0x012127, 0x0281A3, 0x028CAD, 0x028AAA, 0x001A1F, 0x000101, 0x00402E, 0x084531, 0x004C35, 0x005237, 0x004A31, 0x006445, 0x007657, 0x004E3A, 0x000300, 
0x00140B, 0x007551, 0x029C68, 0x00A871, 0x003927, 0x00301D, 0x00A671, 0x00A672, 0x002A1E, 0x324E2A, 0x79B965, 0x79B965, 0x79B964, 0x79B964, 0x7BB661, 0x3C4718, 
0x0F1002, 0x010101, 0x00120C, 0x095339, 0x1D3E27, 0x070B06, 0x70AC5E, 0x7BBA64, 0x192816, 0x383E0B, 0xC2DC2A, 0xC2DC2A, 0xC2DC2A, 0xC2DC2A, 0xC2DB2B, 0xA7BB29, 
0x111705, 0x222B09, 0x0E1404, 0x99AF20, 0xBDD428, 0x161804, 0x101104, 0xC1AD27, 0xD3BB2B, 0xD3BB2B, 0xD4B92B, 0xB0A726, 0x101705, 0x452B0B, 0xD2B82A, 0xBFA125, 
0x3D260A, 0x181905, 0x795C17, 0x99711C, 0xD5B82B, 0x9D9021, 0x8F2F13, 0xF25721, 0xF25721, 0xD1491D, 0x170002, 0x471709, 0xED5E21, 0xF25921, 0xF25B22, 0xE85D21, 
0x5D250E, 0x020100, 0x331707, 0x903A15, 0xB9401B, 0x661F0F, 0x020100, 0x1B0B04, 0xE25822, 0xD2521E, 0x160900, 0x481C0A, 0xEE5E22, 0xF15F22, 0xF15F22, 0xF15F22, 
0xF15F22, 0xF15F22, 0xC64E1D, 0x6A290F, 0x210D05, 0x0F0503, 0x210C06, 0xC64E1D, 0xB0451A, 0xB0451A, 0x0A0401, 0x40130F, 0x240C08, 0x480016, 0xEA3140, 0xEE3540, 
0xEE3441, 0xEE3441, 0xEE3441, 0xEE3441, 0xEE3441, 0xEE3640, 0xEE3640, 0xEE3241, 0xC42836, 0x230A08, 0x220E04, 0x170A00, 0x78211E, 0x33090F, 0x100005, 0xD1153E, 
0xED1346, 0xED0F47, 0xED0F47, 0xED0F47, 0xED0F47, 0xED0F47, 0xED0F47, 0xED1047, 0xED1047, 0xC60D3B, 0x2A000D, 0x080003, 0x1A0208, 0x22030A, 0x940F2C, 0xE01742, 
0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xED1846, 0xD5163F, 0x7A0C24, 0x0D0104, 0x1B0308, 0x500818, 0x740C22, 0x7F0D26, 0x6F0B21, 0x450714, 0x100205};

const int blackStartIndexes30[] PROGMEM = {
0, 51, 85, 119, 151, 184, 203, 217, 234, 249, 267, 282, 299, 314, 333, 346, 
367, 370, 378, 401, 410, 434, 441, 468, 473, 475, 508, 540, 567, 572, 598, 628
};

const int blackEndIndexes30[] PROGMEM = {
45, 75, 105, 136, 167, 199, 205, 230, 237, 262, 270, 291, 302, 323, 335, 358, 
368, 370, 390, 406, 422, 435, 455, 468, 473, 487, 520, 553, 569, 586, 620, 703
};

//RLE image data for imageIndex: 31


const uint32_t startupFrame31[] PROGMEM = {
0x070106, 0x27061E, 0x400A32, 0x480B38, 0x3B092E, 0x1B0415, 0x020002, 0x4F0D3E, 0x62104C, 0x981877, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB11C8A, 0x871569, 0x310826, 
0x10010B, 0x8B166C, 0xB71D8E, 0x831566, 0x721158, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB71C8E, 0x550D41, 0x07030A, 0x591756, 0x811A6D, 0x561047, 
0x551046, 0x521249, 0x9D258F, 0x9C258F, 0x9C258F, 0x9C258F, 0x9B258F, 0x901F7F, 0x23051A, 0x12081B, 0x010001, 0x3E1654, 0x3E1B59, 0x000205, 0x000104, 0x0F0819, 
0x572681, 0x622890, 0x622890, 0x612B90, 0x552981, 0x070011, 0x250F36, 0x672990, 0x21082B, 0x0E0E1B, 0x4F3E86, 0x08040C, 0x030204, 0x423471, 0x5D479D, 0x5C499E, 
0x553A88, 0x0E0010, 0x1E2543, 0x573788, 0x5E4198, 0x483B7D, 0x000101, 0x09395D, 0x0B7AC2, 0x00304D, 0x000102, 0x004D7A, 0x0679C3, 0x086DAD, 0x000F1B, 0x002D4B, 
0x114E81, 0x083150, 0x0075BF, 0x1078C3, 0x041727, 0x000403, 0x001912, 0x000D04, 0x004669, 0x00548D, 0x003D68, 0x00060F, 0x002030, 0x006E9F, 0x00131F, 0x00393D, 
0x0287B4, 0x004557, 0x004660, 0x0087B4, 0x0087B4, 0x003546, 0x000403, 0x014833, 0x07412F, 0x004F3A, 0x004430, 0x004D35, 0x00664A, 0x005D45, 0x000003, 0x000600, 
0x001E11, 0x00805B, 0x06A774, 0x009468, 0x00120D, 0x00845C, 0x00A575, 0x00513A, 0x5E8B4A, 0x7EBB63, 0x7EBB63, 0x7EBB63, 0x7EBB63, 0x54682A, 0x151800, 0x010201, 
0x002419, 0x1A5A3C, 0x050905, 0x426738, 0x80BC62, 0x38542D, 0x738017, 0xC2DD29, 0xC2DD29, 0xC2DD29, 0xC2DC29, 0xB0C42A, 0x1A2108, 0x323E0D, 0x1C2608, 0x4F5D10, 
0xC2DC29, 0x3B410B, 0x41370D, 0xDCA829, 0xDCA829, 0xDDA629, 0xC19C25, 0x171E06, 0x55290C, 0xDDA729, 0xD49C26, 0x50280C, 0x3E350C, 0xA56B1C, 0xDB9B27, 0xCA9E26, 
0x090C02, 0x050000, 0xC3401B, 0xF35421, 0xD8481D, 0x200000, 0x571E09, 0xF15F20, 0xF3561F, 0xF3571F, 0xEF5F20, 0x803311, 0x1A0B01, 0x270D03, 0x621C0D, 0x8D2A15, 
0x41170A, 0x2C1206, 0x050200, 0x41190A, 0xCB4C23, 0x210E03, 0x541914, 0xF0552F, 0xF0552E, 0xF0552F, 0xF0552F, 0xF0552E, 0xF0552E, 0xE34F2C, 0x993221, 0x6E1F1B, 
0x360D0E, 0x712D10, 0x9B3D15, 0xB84420, 0x260C09, 0x050002, 0x59001B, 0xED1B46, 0xED1646, 0xED1446, 0xED1446, 0xED1446, 0xED1446, 0xED1446, 0xED1746, 0xED1D45, 
0xDD1D40, 0x34090F, 0x21000A, 0x3B0712, 0x450714, 0xC8143B, 0xED1746, 0xED1846, 0xED1746, 0xED1746, 0xED1746, 0xED1846, 0xED1746, 0xA51031, 0x1D0209, 0x020001, 
0x080102, 0x530818, 0x99102D, 0xBD1338, 0xC5143A, 0xB61236, 0x890E28, 0x3B0611, 0x040001};

const int blackStartIndexes31[] PROGMEM = {
0, 83, 117, 150, 184, 204, 216, 235, 249, 268, 281, 300, 313, 334, 345, 367, 
370, 377, 401, 409, 434, 441, 468, 475, 507, 535, 539, 566, 571, 596, 625};

const int blackEndIndexes31[] PROGMEM = {
76, 106, 137, 168, 200, 204, 231, 237, 263, 270, 292, 302, 324, 335, 359, 368, 
370, 391, 405, 423, 435, 455, 468, 488, 521, 536, 554, 569, 587, 623, 703};

//RLE image data for imageIndex: 32


const uint32_t startupFrame32[] PROGMEM = {
0x160411, 0x4C0C3C, 0x701257, 0x77135D, 0x671051, 0x3E0A30, 0x0B0208, 0x0C0209, 0x711259, 0x841567, 0x7E1462, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xB61D8E, 0xA1197D, 
0x460B37, 0x020002, 0x0A0208, 0x821667, 0xAD1D88, 0x8E186F, 0x63104E, 0xB31E8E, 0xB41E8E, 0xB41E8E, 0xB41E8E, 0xB31E8E, 0xA51C82, 0x11020C, 0x000001, 0x4B1D61, 
0x3B1342, 0x1B071A, 0x150615, 0x240C29, 0x6F2886, 0x752A90, 0x752A90, 0x752B91, 0x6D2784, 0x1A0518, 0x2D1442, 0x2B113B, 0x261338, 0x411C5C, 0x000103, 0x47246A, 
0x633293, 0x623493, 0x5A2E86, 0x100017, 0x291B43, 0x662D91, 0x5C2E86, 0x09040D, 0x235A94, 0x1A5285, 0x000203, 0x1C4774, 0x2E73BC, 0x2D67AB, 0x0D0F1F, 0x003251, 
0x234372, 0x264C82, 0x2E72BD, 0x102E4C, 0x000503, 0x000C07, 0x021114, 0x005E97, 0x005893, 0x021E37, 0x00263A, 0x0073AC, 0x001926, 0x003D4D, 0x007FB5, 0x00232F, 
0x0079AC, 0x0082BB, 0x005477, 0x000B08, 0x054A35, 0x004230, 0x004A3C, 0x003E30, 0x00533D, 0x005D45, 0x00110F, 0x010200, 0x000C0A, 0x002819, 0x008E6A, 0x04A579, 
0x00503B, 0x004536, 0x00A37A, 0x00795B, 0x0F150B, 0x80BB5F, 0x83BD61, 0x83BC61, 0x82BC61, 0x6B8A3C, 0x202300, 0x000302, 0x010503, 0x003A27, 0x153C27, 0x0E170B, 
0x82BD60, 0x5F8845, 0x070800, 0xA9BC22, 0xC3DC28, 0xC3DC28, 0xC4DB28, 0xB6CA29, 0x252D0A, 0x434E11, 0x2F380C, 0x0E0D00, 0x1C2106, 0xBBD226, 0x6F7B15, 0x845A17, 
0xE59026, 0xE59026, 0xCF8924, 0x212107, 0x64270E, 0xE59126, 0xE68E26, 0x642C0F, 0x654612, 0xC87821, 0xE49327, 0x2E2409, 0x260205, 0xED5421, 0xDF4F1E, 0x290000, 
0x65250A, 0xF1601F, 0xF2591F, 0xF25A1F, 0xF1601F, 0xA44215, 0x3F1905, 0x040000, 0x190000, 0x641C0F, 0x943615, 0x702D10, 0x180A02, 0x581F12, 0x37130A, 0x650F1D, 
0xEF413C, 0xEF423C, 0xEF413C, 0xEF413C, 0xEF423C, 0xEF433B, 0xEF423B, 0xD33338, 0x98212A, 0x280F07, 0x4E200A, 0x712816, 0x4F1415, 0x25000B, 0xE61644, 0xED0747, 
0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0047, 0xED0747, 0xCC0D3D, 0x33000F, 0x1F0009, 0x2D050D, 0x970F2D, 0xD7163F, 0xEB1845, 0xED1846, 0xE71744, 0xC7143B, 
0x730C22, 0x0E0104, 0x110205, 0x2D050D, 0x350510, 0x24040B, 0x060102, 0x040103, 0x080106, 0x040103};

const int blackStartIndexes32[] PROGMEM = {
0, 116, 150, 182, 215, 235, 248, 268, 280, 300, 312, 334, 344, 367, 376, 401, 
408, 434, 440, 474, 506, 534, 538, 565, 595, 690};

const int blackEndIndexes32[] PROGMEM = {
108, 138, 169, 200, 232, 237, 264, 270, 293, 302, 325, 334, 359, 368, 391, 403, 
424, 435, 456, 489, 522, 536, 555, 589, 686, 703};

//RLE image data for imageIndex: 33


const uint32_t startupFrame33[] PROGMEM = {
0x050104, 0x090107, 0x010001, 0x020002, 0x310826, 0x65104F, 0x9C197A, 0xA11A7D, 0x921772, 0x671050, 0x1F0518, 0x14020E, 0x8C166D, 0xAD1C87, 0x6B1052, 0xB81C8E, 
0xB81C8E, 0xB81C8E, 0xB81C8E, 0xB61C8C, 0x4D0C3C, 0x07040B, 0x5B1858, 0x71165E, 0x500F42, 0x470F3E, 0x932388, 0x99258F, 0x99258F, 0x98268F, 0x942287, 0x320827, 
0x140A1E, 0x3B0F4F, 0x29113C, 0x000307, 0x471D6A, 0x62258F, 0x62288F, 0x5A2A87, 0x11001E, 0x321549, 0x68248E, 0x16001C, 0x060E18, 0x3A5D9F, 0x05101A, 0x293D6A, 
0x4466B2, 0x435BA3, 0x140D22, 0x123354, 0x393E76, 0x4761AD, 0x294273, 0x000503, 0x00283E, 0x0070B6, 0x003E67, 0x002B43, 0x0077B7, 0x001F2F, 0x004562, 0x005A87, 
0x003A55, 0x0080BF, 0x006EA6, 0x010507, 0x001510, 0x084531, 0x004538, 0x00423C, 0x004439, 0x00543F, 0x00231C, 0x010403, 0x001112, 0x013422, 0x039A7A, 0x009E7A, 
0x032B25, 0x008D72, 0x009B7B, 0x00110E, 0x395128, 0x88BF5D, 0x87BF5E, 0x86BE60, 0x7FA94D, 0x2F340A, 0x000302, 0x021009, 0x06482F, 0x000E09, 0x4F753A, 0x85BA59, 
0x0B1109, 0x343808, 0xC7D627, 0xC6D727, 0xC7D627, 0xBBCC28, 0x30380C, 0x565B14, 0x454910, 0x0B0A00, 0x231C05, 0x878D19, 0xA7B420, 0x010100, 0x080601, 0xC76A1E, 
0xEC7924, 0xDB7522, 0x2F2208, 0x732A0F, 0xEB7D24, 0xEB7B24, 0x793111, 0x010000, 0x060901, 0x7D4914, 0xCD6F20, 0x734013, 0x5B1E0D, 0xE35322, 0x351006, 0x722614, 
0xF15C27, 0xF15827, 0xF15827, 0xF15C27, 0xC74B21, 0x682413, 0x30080B, 0x2D0709, 0x983815, 0x9C3D17, 0x481B0D, 0x030001, 0x190706, 0x7A0524, 0xED2844, 0xED2744, 
0xED2644, 0xED2744, 0xED2744, 0xED2943, 0xED2A43, 0xDC253F, 0x330B0E, 0x080400, 0x190805, 0x531017, 0x610A1D, 0xD3133E, 0xED1546, 0xED1546, 0xED1546, 0xED1546, 
0xED1546, 0xAC0E33, 0x27000C, 0x020001, 0x0F0204, 0x4D0817, 0x7B0C24, 0x850D27, 0x6C0B20, 0x33050F};

const int blackStartIndexes33[] PROGMEM = {
0, 114, 148, 181, 214, 236, 247, 268, 279, 296, 300, 312, 334, 344, 367, 376, 
401, 408, 439, 473, 505, 533, 537, 563};

const int blackEndIndexes33[] PROGMEM = {
110, 139, 170, 201, 233, 237, 264, 270, 294, 296, 302, 326, 334, 360, 368, 392, 
402, 424, 457, 489, 523, 535, 556, 703};

//RLE image data for imageIndex: 34


const uint32_t startupFrame34[] PROGMEM = {
0x0F020C, 0x26061E, 0x2C0723, 0x1B0415, 0x0F020C, 0x620F4C, 0x6F1256, 0xB71D8E, 0xB71D8E, 0xB21C8A, 0x8F176F, 0x3A092D, 0x010001, 0x0F030D, 0x87186D, 0xA21B80, 
0x651150, 0xA91E88, 0xB21F8E, 0xB21F8E, 0xB11F8E, 0xA91C86, 0x170311, 0x040003, 0x45175A, 0x280D2B, 0x0D030C, 0x140716, 0x5B1E71, 0x71238E, 0x71268F, 0x6C2989, 
0x250026, 0x3C1654, 0x270333, 0x1F2342, 0x30305E, 0x30305E, 0x5354A5, 0x534B99, 0x190E28, 0x232E53, 0x54418F, 0x47498C, 0x000305, 0x000302, 0x004F80, 0x0062A0, 
0x010A17, 0x002F49, 0x007ABD, 0x002539, 0x00486E, 0x003C5F, 0x006398, 0x007CC2, 0x031B2A, 0x012319, 0x063D2B, 0x004846, 0x004042, 0x00493D, 0x003025, 0x000607, 
0x00171C, 0x00412D, 0x04A088, 0x006653, 0x00534E, 0x009E88, 0x00372F, 0x6C9645, 0x8CC35A, 0x8AC25D, 0x8EBF58, 0x414A14, 0x000503, 0x002013, 0x003725, 0x0F1F0D, 
0x8BC259, 0x2D3F1E, 0x797C15, 0xCCCE26, 0xCDCD25, 0xC1C825, 0x3B420E, 0x6D6517, 0x5F5513, 0x251D00, 0x645211, 0xC5C623, 0x1D2103, 0x361708, 0xF06622, 0xE66321, 
0x3E1E07, 0x84300F, 0xEF6D20, 0xEF6C20, 0x923C12, 0x180A00, 0x1A1300, 0x793E11, 0x9D4518, 0x321307, 0x110701, 0x802E16, 0x4D1A0E, 0x822121, 0xF04F34, 0xF04D34, 
0xF04D34, 0xF04F33, 0xE14932, 0x9F2A27, 0x5C0F1A, 0x491B0B, 0x813213, 0x772719, 0x030101, 0x490016, 0xED1646, 0xED0747, 0xED0347, 0xED0347, 0xED0347, 0xED0E47, 
0xDE1642, 0x490915, 0x23000B, 0x020001, 0x020001, 0x430714, 0x9E102F, 0xCA143C, 0xD0153D, 0xBB1337, 0x780C23, 0x160207, 0x070102, 0x0B0103};

const int blackStartIndexes34[] PROGMEM = {
0, 146, 181, 213, 246, 268, 279, 297, 301, 311, 334, 343, 367, 375, 401, 407, 
440, 473, 501, 505, 532, 561};

const int blackEndIndexes34[] PROGMEM = {
141, 171, 202, 233, 265, 270, 295, 297, 302, 327, 334, 361, 368, 393, 402, 425, 
458, 491, 502, 523, 558, 703};

//RLE image data for imageIndex: 35


const uint32_t startupFrame35[] PROGMEM = {
0x010001, 0x290620, 0x5A0E46, 0x62104D, 0x480B38, 0x150310, 0x1E0416, 0x911771, 0x7D1461, 0xB61C8C, 0xB81C8E, 0xB81C8E, 0xAF1B87, 0x4D0C3C, 0x0D0211, 0x5A1757, 
0x561047, 0x3C0C33, 0x7C1E77, 0x92238F, 0x92258F, 0x93248C, 0x420A37, 0x1A0925, 0x372557, 0x12091E, 0x312356, 0x5A4099, 0x583992, 0x1A1131, 0x332559, 0x5F3992, 
0x0F0C1A, 0x020A11, 0x196AAE, 0x00253F, 0x0A2F4B, 0x1E78BF, 0x0E2842, 0x003F67, 0x184068, 0x1F77C0, 0x0E3A5F, 0x000101, 0x04291D, 0x003B31, 0x004A55, 0x004245, 
0x003428, 0x00080B, 0x001F28, 0x004F3E, 0x009D8E, 0x00413E, 0x00918C, 0x00675F, 0x1B2713, 0x8EC153, 0x8EC658, 0x90C45A, 0x566622, 0x000905, 0x07321E, 0x00160E, 
0x5C8538, 0x60843A, 0x0B0C00, 0xBCAE1F, 0xD4C023, 0xCBBF23, 0x484C10, 0x836919, 0x775D16, 0x4C3509, 0xBBA01E, 0x54550C, 0x7E2A12, 0xF25822, 0x4E1708, 0x923413, 
0xF16121, 0xF16221, 0xAC4518, 0x3A1807, 0x331907, 0x752B12, 0x782A11, 0x3F1909, 0x030100, 0x0F0503, 0x3E140D, 0x97172B, 0xEE3A3F, 0xEE393F, 0xEE393F, 0xEE3B3E, 
0xEE393F, 0xC52537, 0x310C0D, 0x311404, 0x611D17, 0x0A0203, 0x030001, 0x890C28, 0xDF0943, 0xED0C47, 0xED0C47, 0xED0B47, 0xBC0638, 0x400013, 0x010000, 0x180207, 
0x430714, 0x4C0817, 0x2E050E, 0x020001};

const int blackStartIndexes35[] PROGMEM = {
0, 179, 212, 245, 269, 278, 301, 310, 334, 342, 367, 374, 401, 406, 440, 472, 
500, 504, 531};

const int blackEndIndexes35[] PROGMEM = {
172, 203, 234, 266, 270, 297, 302, 327, 334, 361, 368, 393, 402, 426, 458, 491, 
502, 525, 703};

//RLE image data for imageIndex: 36


const uint32_t startupFrame36[] PROGMEM = {
0x020002, 0x190413, 0x4B0C3A, 0x89166A, 0x971775, 0x7C1360, 0x360829, 0x010001, 0x1C061A, 0x89186E, 0x76145E, 0x991C7D, 0xAE1F8E, 0xAD208E, 0xAA1E8A, 0x22051B, 
0x08000B, 0x3A134C, 0x0E030F, 0x040104, 0x411B58, 0x6A2D91, 0x682C8E, 0x2D113A, 0x461D62, 0x250D32, 0x132C4B, 0x1D497C, 0x142C48, 0x366EB8, 0x1B284B, 0x0F3358, 
0x345796, 0x295593, 0x000302, 0x06281A, 0x004349, 0x004A5C, 0x00352E, 0x000404, 0x00090F, 0x002836, 0x005F55, 0x007B76, 0x005A62, 0x008E90, 0x000B0A, 0x4F6A2C, 
0x95CA51, 0x92C758, 0x6B8431, 0x020300, 0x001009, 0x00321E, 0x1B3112, 0x83B249, 0x090C06, 0x443C08, 0xDCB021, 0xD6B01F, 0x56520E, 0x99691A, 0x906018, 0x020000, 
0x0B0A00, 0x886114, 0x978015, 0x060000, 0xB03619, 0x691611, 0x9E2F1E, 0xF1562A, 0xF1562A, 0xC64824, 0x682217, 0x521512, 0x702110, 0x6F2A13, 0x0B0402, 0x7A0924, 
0xED2245, 0xED1E45, 0xED1E45, 0xED2245, 0xED2444, 0x5E0E1B, 0x210908, 0x0B0203, 0x0F0104, 0x5D081B, 0x9C0E2E, 0xA60F31, 0x7E0B25, 0x28020C};

const int blackStartIndexes36[] PROGMEM = {
0, 177, 212, 244, 277, 301, 309, 342, 368, 374, 405, 439, 468, 471, 499};

const int blackEndIndexes36[] PROGMEM = {
175, 204, 235, 266, 298, 302, 328, 362, 368, 394, 426, 460, 468, 492, 703};

//RLE image data for imageIndex: 37


const uint32_t startupFrame37[] PROGMEM = {
0x020002, 0x1F0519, 0x25061D, 0x0C0209, 0x320827, 0x77135D, 0x9F197B, 0xB81C8E, 0xA81A82, 0x530D40, 0x150019, 0x4C1147, 0x340A2A, 0x61175F, 0x8A1F8E, 0x8B258F, 
0x520D4B, 0x25002F, 0x2B3F71, 0x000C19, 0x162542, 0x445FAD, 0x1F244E, 0x20325E, 0x4756A3, 0x070D18, 0x010503, 0x00281F, 0x00506A, 0x003840, 0x000B07, 0x000A14, 
0x003245, 0x006A67, 0x005A61, 0x00879A, 0x003134, 0x0A110A, 0x81A83F, 0x98C953, 0x7F9E3D, 0x0E1200, 0x001D11, 0x0D2615, 0x6A8E35, 0x30421C, 0x987013, 0xE3A01D, 
0x67560B, 0xAC681A, 0xA65F18, 0x110000, 0x2E2000, 0xA67515, 0x332304, 0x2D0006, 0x6F1415, 0xB2212C, 0xF04536, 0xF04736, 0xE14436, 0x992029, 0x44000E, 0x622310, 
0x160705, 0x1C0009, 0xB20B35, 0xE20044, 0xE70045, 0xCD053E, 0x68091F, 0x050001, 0x1C0308, 0x22030A, 0x080102};

const int blackStartIndexes37[] PROGMEM = {
0, 210, 243, 276, 302, 309, 341, 368, 373, 405, 438, 467, 470, 498};

const int blackEndIndexes37[] PROGMEM = {
205, 236, 267, 299, 302, 329, 362, 368, 395, 427, 460, 468, 494, 703};

//RLE image data for imageIndex: 38


const uint32_t startupFrame38[] PROGMEM = {
0x1D0416, 0x500C3E, 0x600F4A, 0x330727, 0x030002, 0x2C0327, 0x701459, 0x871770, 0xA8198D, 0xA91E8E, 0x35002B, 0x0B0C1A, 0x29234C, 0x221F40, 0x584CA1, 0x2E1E52, 
0x3E3674, 0x1E1D3F, 0x010602, 0x00363E, 0x004862, 0x00100B, 0x000C18, 0x003C54, 0x006266, 0x00647B, 0x005F6F, 0x35451D, 0xA2C84C, 0x8FB046, 0x202500, 0x050800, 
0x002216, 0x3F4D1F, 0x5F7C31, 0x191300, 0xD38119, 0x7F550E, 0xBC621D, 0xBA5B1B, 0x331100, 0x693F0D, 0x73450C, 0x0C0202, 0x250007, 0xAE0031, 0xEE2E40, 0xEE3140, 
0xEE3341, 0x66001D, 0x220904, 0x1E0907, 0x2A000D, 0x6E0021, 0x790024, 0x400013, 0x010000};

const int blackStartIndexes38[] PROGMEM = {
0, 243, 275, 302, 308, 340, 372, 405, 437, 467};

const int blackEndIndexes38[] PROGMEM = {
237, 268, 299, 302, 330, 363, 395, 428, 461, 703};

//RLE image data for imageIndex: 39


const uint32_t startupFrame39[] PROGMEM = {
0x010001, 0x020001, 0x3D0A30, 0x7A1260, 0x9A1577, 0x5B0D47, 0x1B102A, 0x2D0028, 0x441A49, 0x7C3696, 0x581962, 0x2B1844, 0x020B07, 0x004660, 0x001B1D, 0x000E19, 
0x004562, 0x005563, 0x006B8C, 0x000B0C, 0x000303, 0x778836, 0xA1BA4A, 0x373A09, 0x131400, 0x002517, 0x6D7D33, 0x0A1007, 0x593100, 0x9E5219, 0xCF5A29, 0xCE5228, 
0x6C2316, 0x6F390E, 0x2E1207, 0x4D0017, 0xCC103C, 0xD5163E, 0x8D1229, 0x0B0003, 0x0D0403, 0x050001, 0x080003};

const int blackStartIndexes39[] PROGMEM = {
0, 241, 274, 307, 340, 372, 404, 436, 465};

const int blackEndIndexes39[] PROGMEM = {
238, 269, 300, 331, 363, 396, 429, 462, 703};

//RLE image data for imageIndex: 40


const uint32_t startupFrame40[] PROGMEM = {
0x030002, 0x200518, 0x28051D, 0x060004, 0x30002B, 0x6B165B, 0x9D2290, 0x4B0047, 0x000005, 0x061F26, 0x002F3E, 0x000F19, 0x004669, 0x125876, 0x062F3D, 0x232915, 
0xA6AE48, 0x534F16, 0x221C0D, 0x404A28, 0x424721, 0x010100, 0x040200, 0x6C2E11, 0xDD4935, 0xE44536, 0x75231A, 0x3A1805, 0x030101, 0x040002, 0x4D0017, 0x58001B, 
0x160007};

const int blackStartIndexes40[] PROGMEM = {
0, 274, 307, 339, 372, 404, 434};

const int blackEndIndexes40[] PROGMEM = {
269, 301, 332, 364, 396, 429, 703};

//RLE image data for imageIndex: 41


const uint32_t startupFrame41[] PROGMEM = {
0x020001, 0x020002, 0x080006, 0x4C0A3D, 0x670054, 0x0E000A, 0x000202, 0x122835, 0x1E1D30, 0x434574, 0x223E58, 0x000303, 0x000202, 0x696832, 0x796426, 0x432C1E, 
0x575330, 0x080704, 0x170600, 0x9E2728, 0xAF282D, 0x320C08, 0x050200, 0x010001};

const int blackStartIndexes41[] PROGMEM = {
0, 273, 306, 339, 371, 403, 433};

const int blackEndIndexes41[] PROGMEM = {
270, 301, 332, 364, 397, 431, 703};

//RLE image data for imageIndex: 42


const uint32_t startupFrame42[] PROGMEM = {
0x080107, 0x0A0108, 0x040708, 0x342338, 0x4B335B, 0x07090D, 0x0F0F09, 0x76562D, 0x633D31, 0x17120C, 0x010000, 0x27060B, 0x2F090D, 0x040101};

const int blackStartIndexes42[] PROGMEM = {
0, 305, 338, 370, 402};

const int blackEndIndexes42[] PROGMEM = {
302, 333, 365, 397, 703};

//RLE image data for imageIndex: 43


const uint32_t startupFrame43[] PROGMEM = {
0x0E070E, 0x140C17, 0x392719, 0x3C2420, 0x020000, 0x030101};

const int blackStartIndexes43[] PROGMEM = {
0, 337, 369, 401};

const int blackEndIndexes43[] PROGMEM = {
334, 366, 398, 703};

//RLE image data for imageIndex: 44


const uint32_t startupFrame44[] PROGMEM = {
0x010000, 0x020100};

const int blackStartIndexes44[] PROGMEM = {
0, 369};

const int blackEndIndexes44[] PROGMEM = {
366, 703};



// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 15840)
const int sallArray_LEN = 45;
const unsigned long* sallArray[45] = {
	startupFrame0,
	startupFrame1,
	startupFrame10,
	startupFrame11,
	startupFrame12,
	startupFrame13,
	startupFrame14,
	startupFrame15,
	startupFrame16,
	startupFrame17,
	startupFrame18,
	startupFrame19,
	startupFrame2,
	startupFrame20,
	startupFrame21,
	startupFrame22,
	startupFrame23,
	startupFrame24,
	startupFrame25,
	startupFrame26,
	startupFrame27,
	startupFrame28,
	startupFrame29,
	startupFrame3,
	startupFrame30,
	startupFrame31,
	startupFrame32,
	startupFrame33,
	startupFrame34,
	startupFrame35,
	startupFrame36,
	startupFrame37,
	startupFrame38,
	startupFrame39,
	startupFrame4,
	startupFrame40,
	startupFrame41,
	startupFrame42,
	startupFrame43,
	startupFrame44,
	startupFrame5,
	startupFrame6,
	startupFrame7,
	startupFrame8,
	startupFrame9
};




// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 6688)
const int startupFrameLEN = 45;
const int* blackStartIndexesArray[45] = {
	blackStartIndexes0,
	blackStartIndexes1,
	blackStartIndexes2,
	blackStartIndexes3,
	blackStartIndexes4,
	blackStartIndexes5,
	blackStartIndexes6,
	blackStartIndexes7,
	blackStartIndexes8,
	blackStartIndexes9,
	blackStartIndexes10,
	blackStartIndexes11,
	blackStartIndexes12,
	blackStartIndexes13,
	blackStartIndexes14,
	blackStartIndexes15,
	blackStartIndexes16,
	blackStartIndexes17,
	blackStartIndexes18,
	blackStartIndexes19,
	blackStartIndexes20,
	blackStartIndexes21,
	blackStartIndexes22,
	blackStartIndexes23,
	blackStartIndexes24,
	blackStartIndexes25,
	blackStartIndexes26,
	blackStartIndexes27,
	blackStartIndexes28,
	blackStartIndexes29,
	blackStartIndexes30,
	blackStartIndexes31,
	blackStartIndexes32,
	blackStartIndexes33,
	blackStartIndexes34,
	blackStartIndexes35,
	blackStartIndexes36,
	blackStartIndexes37,
	blackStartIndexes38,
	blackStartIndexes39,
	blackStartIndexes40,
	blackStartIndexes41,
	blackStartIndexes42,
	blackStartIndexes43,
	blackStartIndexes44,

};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 6688)
const int blackEndIndexesLEN = 45;
const int* blackEndIndexesArray[45] = {
	blackEndIndexes0,
	blackEndIndexes1,
	blackEndIndexes2,
	blackEndIndexes3,
	blackEndIndexes4,
	blackEndIndexes5,
	blackEndIndexes6,	
	blackEndIndexes7,
	blackEndIndexes8,
	blackEndIndexes9,
	blackEndIndexes10,
	blackEndIndexes11,
	blackEndIndexes12,
	blackEndIndexes13,
	blackEndIndexes14,
	blackEndIndexes15,
	blackEndIndexes16,
	blackEndIndexes17,
	blackEndIndexes18,
	blackEndIndexes19,
	blackEndIndexes20,
	blackEndIndexes21,
	blackEndIndexes22,
	blackEndIndexes23,
	blackEndIndexes24,
	blackEndIndexes25,
	blackEndIndexes26,
	blackEndIndexes27,
	blackEndIndexes28,
	blackEndIndexes29,
	blackEndIndexes30,
	blackEndIndexes31,
	blackEndIndexes32,
	blackEndIndexes33,
	blackEndIndexes34,
	blackEndIndexes35,
	blackEndIndexes36,
	blackEndIndexes37,
	blackEndIndexes38,
	blackEndIndexes39,
	blackEndIndexes40,
	blackEndIndexes41,
	blackEndIndexes42,
	blackEndIndexes43,
	blackEndIndexes44,

};


const uint32_t* startupFrameArray[45] = {
	startupFrame0,
	startupFrame1,
	startupFrame2,
	startupFrame3,
	startupFrame4,
	startupFrame5,
	startupFrame6,
	startupFrame7,
	startupFrame8,
	startupFrame9,
	startupFrame10,
	startupFrame11,
	startupFrame12,
	startupFrame13,
	startupFrame14,
	startupFrame15,
	startupFrame16,
	startupFrame17,
	startupFrame18,
	startupFrame19,
	startupFrame20,
	startupFrame21,
	startupFrame22,
	startupFrame23,
	startupFrame24,
	startupFrame25,
	startupFrame26,
	startupFrame27,
	startupFrame28,
	startupFrame29,
	startupFrame30,
	startupFrame31,
	startupFrame32,
	startupFrame33,
	startupFrame34,
	startupFrame35,
	startupFrame36,
	startupFrame37,
	startupFrame38,
	startupFrame39,
	startupFrame40,
	startupFrame41,
	startupFrame42,
	startupFrame43,
	startupFrame44,

};



#endif
#endif