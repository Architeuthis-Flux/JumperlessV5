{"version":3,"file":"index.iife.js.map","sources":["src/amend/index.js","src/isbot/index.js","src/index.js"],"sourcesContent":["/**\n * Mutate given list of patter strings\n * @param {string[]} list\n * @returns {string[]}\n */\nexport function amend (list) {\n  try {\n    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor\n    new RegExp('(?<! cu)bot').test('dangerbot') // eslint-disable-line prefer-regex-literals\n  } catch (error) {\n    // Skip regex fixes\n    return list\n  }\n\n  [\n    // Addresses: Cubot device\n    ['bot', '(?<! cu)bot'],\n    // Addresses: Android webview\n    ['google', '(?<! (?:channel/|google/))google(?!(app|/google| pixel))'],\n    // Addresses: libhttp browser\n    ['http', '(?<!(?:lib))http'],\n    // Addresses: java based browsers\n    ['java', 'java(?!;)'],\n    // Addresses: Yandex Search App\n    ['search', '(?<! ya(?:yandex)?)search']\n  ].forEach(\n    ([search, replace]) => {\n      const index = list.lastIndexOf(search)\n      if (~index) {\n        list.splice(index, 1, replace)\n      }\n    }\n  )\n\n  return list\n}\n","import list from '../list.json' assert { type: 'json' }\nimport { amend } from '../amend/index.js'\n\namend(list)\n\nconst flags = 'i'\n\n/**\n * Test user agents for matching patterns\n */\nexport class Isbot {\n  /**\n   * @type {string[]}\n   */\n  #list\n\n  /**\n   * @type {RegExp}\n   */\n  #pattern\n\n  constructor (patterns) {\n    this.#list = patterns || list.slice()\n    this.#update()\n\n    const isbot = ua => this.test(ua)\n\n    return Object.defineProperties(\n      isbot,\n      Object.entries(Object.getOwnPropertyDescriptors(Isbot.prototype)).reduce(\n        (accumulator, [prop, descriptor]) => {\n          if (typeof descriptor.value === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { value: this[prop].bind(this) } }\n            )\n          }\n          if (typeof descriptor.get === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { get: () => this[prop] } }\n            )\n          }\n          return accumulator\n        },\n        {}\n      )\n    )\n  }\n\n  /**\n   * Recreate the pattern from rules list\n   */\n  #update () {\n    this.#pattern = new RegExp(\n      this.#list.join('|'),\n      flags\n    )\n  }\n\n  /**\n   * Find the first index of an existing rule or -1 if not found\n   * @param  {string} rule\n   * @returns {number}\n   */\n  #index (rule) {\n    return this.#list.indexOf(rule.toLowerCase())\n  }\n\n  /**\n   * Get a clone of the pattern\n   * @type RegExp\n   */\n  get pattern () {\n    return new RegExp(this.#pattern)\n  }\n\n  /**\n   * Match given string against out pattern\n   * @param  {string} ua User Agent string\n   * @returns {boolean}\n   */\n  test (ua) {\n    return Boolean(ua) && this.#pattern.test(ua)\n  }\n\n  isbot (ua) {\n    return Boolean(ua) && this.#pattern.test(ua)\n  }\n\n  /**\n   * Get the match for strings' known crawler pattern\n   * @param  {string} ua User Agent string\n   * @returns {string|null}\n   */\n  find (ua = '') {\n    const match = ua.match(this.#pattern)\n    return match && match[0]\n  }\n\n  /**\n   * Get the patterns that match user agent string if any\n   * @param  {string} ua User Agent string\n   * @returns {string[]}\n   */\n  matches (ua = '') {\n    return this.#list.filter(\n      entry => new RegExp(entry, flags).test(ua)\n    )\n  }\n\n  /**\n   * Clear all patterns that match user agent\n   * @param  {string} ua User Agent string\n   * @returns {void}\n   */\n  clear (ua = '') {\n    this.exclude(this.matches(ua))\n  }\n\n  /**\n   * Extent patterns for known crawlers\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  extend (filters = []) {\n    [].push.apply(\n      this.#list,\n      filters.filter(\n        rule => this.#index(rule) === -1\n      ).map(\n        filter => filter.toLowerCase()\n      )\n    )\n    this.#update()\n  }\n\n  /**\n   * Exclude patterns from bot pattern rule\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  exclude (filters = []) {\n    let { length } = filters\n    while (length--) {\n      const index = this.#index(filters[length])\n      if (index > -1) {\n        this.#list.splice(index, 1)\n      }\n    }\n    this.#update()\n  }\n\n  /**\n   * Create a new Isbot instance using given list or self's list\n   * @param  {string[]} [list]\n   * @returns {Isbot}\n   */\n  spawn (list) {\n    return new Isbot(list || this.#list)\n  }\n}\n","import { Isbot } from './isbot/index.js'\n\nconst isbot = new Isbot()\n\nexport default isbot\n"],"names":["amend","list","RegExp","test","error","forEach","_ref","_ref2","_slicedToArray","search","replace","index","lastIndexOf","splice","flags","_list","WeakMap","_pattern","_update","WeakSet","_index","Isbot","patterns","_this","_classCallCheck","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","slice","_classPrivateMethodGet","_update2","call","isbot","ua","Object","defineProperties","entries","getOwnPropertyDescriptors","prototype","reduce","accumulator","prop","descriptor","assign","_defineProperty","bind","get","_createClass","key","_classPrivateFieldGet","Boolean","find","arguments","length","undefined","match","matches","filter","entry","clear","exclude","extend","_this2","filters","push","apply","rule","_index2","map","toLowerCase","spawn","join","indexOf"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EACA;EACA;EACA;EACA;EACO,SAASA,KAAKA,CAAEC,IAAI,EAAE;IAC3B,IAAI;EACF;MACA,IAAIC,MAAM,CAAC,aAAa,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC7C,CAAC,OAAOC,KAAK,EAAE;EACd;EACA,IAAA,OAAOH,IAAI,CAAA;EACb,GAAA;EAEA,EAAA;EACE;IACA,CAAC,KAAK,EAAE,aAAa,CAAC;EACtB;IACA,CAAC,QAAQ,EAAE,0DAA0D,CAAC;EACtE;IACA,CAAC,MAAM,EAAE,kBAAkB,CAAC;EAC5B;IACA,CAAC,MAAM,EAAE,WAAW,CAAC;EACrB;IACA,CAAC,QAAQ,EAAE,2BAA2B,CAAC,CACxC,CAACI,OAAO,CACP,UAAAC,IAAA,EAAuB;EAAA,IAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA,EAAA,CAAA,CAAA;EAArBG,MAAAA,MAAM,GAAAF,KAAA,CAAA,CAAA,CAAA;EAAEG,MAAAA,OAAO,GAAAH,KAAA,CAAA,CAAA,CAAA,CAAA;EACf,IAAA,IAAMI,KAAK,GAAGV,IAAI,CAACW,WAAW,CAACH,MAAM,CAAC,CAAA;MACtC,IAAI,CAACE,KAAK,EAAE;QACVV,IAAI,CAACY,MAAM,CAACF,KAAK,EAAE,CAAC,EAAED,OAAO,CAAC,CAAA;EAChC,KAAA;EACF,GACF,CAAC,CAAA;EAED,EAAA,OAAOT,IAAI,CAAA;EACb;;EChCAD,KAAK,CAACC,IAAI,CAAC,CAAA;EAEX,IAAMa,KAAK,GAAG,GAAG,CAAA;;EAEjB;EACA;EACA;EAFA,IAAAC,KAAA,oBAAAC,OAAA,EAAA,CAAA;EAAA,IAAAC,QAAA,oBAAAD,OAAA,EAAA,CAAA;EAAA,IAAAE,OAAA,oBAAAC,OAAA,EAAA,CAAA;EAAA,IAAAC,MAAA,oBAAAD,OAAA,EAAA,CAAA;EAGA,IAAaE,KAAK,gBAAA,YAAA;IAWhB,SAAAA,KAAAA,CAAaC,QAAQ,EAAE;EAAA,IAAA,IAAAC,KAAA,GAAA,IAAA,CAAA;EAAAC,IAAAA,eAAA,OAAAH,KAAA,CAAA,CAAA;EAuCvB;EACF;EACA;EACA;EACA;EAJEI,IAAAA,2BAAA,OAAAL,MAAA,CAAA,CAAA;EAVA;EACF;EACA;EAFEK,IAAAA,2BAAA,OAAAP,OAAA,CAAA,CAAA;EAvCA;EACF;EACA;EAFEQ,IAAAA,0BAAA,OAAAX,KAAA,EAAA;QAAAY,QAAA,EAAA,IAAA;QAAAC,KAAA,EAAA,KAAA,CAAA;EAAA,KAAA,CAAA,CAAA;EAKA;EACF;EACA;EAFEF,IAAAA,0BAAA,OAAAT,QAAA,EAAA;QAAAU,QAAA,EAAA,IAAA;QAAAC,KAAA,EAAA,KAAA,CAAA;EAAA,KAAA,CAAA,CAAA;MAMEC,qBAAA,CAAA,IAAI,EAAAd,KAAA,EAASO,QAAQ,IAAIrB,IAAI,CAAC6B,KAAK,EAAE,CAAA,CAAA;MACrCC,sBAAA,CAAA,IAAI,EAAAb,OAAA,EAAAc,QAAA,CAAAC,CAAAA,IAAA,CAAJ,IAAI,CAAA,CAAA;EAEJ,IAAA,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAGC,EAAE,EAAA;EAAA,MAAA,OAAIZ,KAAI,CAACpB,IAAI,CAACgC,EAAE,CAAC,CAAA;EAAA,KAAA,CAAA;MAEjC,OAAOC,MAAM,CAACC,gBAAgB,CAC5BH,KAAK,EACLE,MAAM,CAACE,OAAO,CAACF,MAAM,CAACG,yBAAyB,CAAClB,KAAK,CAACmB,SAAS,CAAC,CAAC,CAACC,MAAM,CACtE,UAACC,WAAW,EAAApC,IAAA,EAAyB;EAAA,MAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA,EAAA,CAAA,CAAA;EAAtBqC,QAAAA,IAAI,GAAApC,KAAA,CAAA,CAAA,CAAA;EAAEqC,QAAAA,UAAU,GAAArC,KAAA,CAAA,CAAA,CAAA,CAAA;EAC7B,MAAA,IAAI,OAAOqC,UAAU,CAAChB,KAAK,KAAK,UAAU,EAAE;UAC1CQ,MAAM,CAACS,MAAM,CACXH,WAAW,EAAAI,eAAA,CAAA,EAAA,EACRH,IAAI,EAAG;YAAEf,KAAK,EAAEL,KAAI,CAACoB,IAAI,CAAC,CAACI,IAAI,CAACxB,KAAI,CAAA;EAAE,SAAC,CAC5C,CAAC,CAAA;EACH,OAAA;EACA,MAAA,IAAI,OAAOqB,UAAU,CAACI,GAAG,KAAK,UAAU,EAAE;UACxCZ,MAAM,CAACS,MAAM,CACXH,WAAW,EAAAI,eAAA,CAAA,EAAA,EACRH,IAAI,EAAG;YAAEK,GAAG,EAAE,SAAAA,GAAA,GAAA;cAAA,OAAMzB,KAAI,CAACoB,IAAI,CAAC,CAAA;EAAA,WAAA;EAAC,SAAC,CACrC,CAAC,CAAA;EACH,OAAA;EACA,MAAA,OAAOD,WAAW,CAAA;EACpB,KAAC,EACD,EACF,CACF,CAAC,CAAA;EACH,GAAA;EAACO,EAAAA,YAAA,CAAA5B,KAAA,EAAA,CAAA;MAAA6B,GAAA,EAAA,SAAA;MAAAF,GAAA;EAqBD;EACF;EACA;EACA;EACE,IAAA,SAAAA,MAAe;QACb,OAAO,IAAI9C,MAAM,CAAAiD,qBAAA,CAAC,IAAI,EAAAlC,QAAA,CAAS,CAAC,CAAA;EAClC,KAAA;;EAEA;EACF;EACA;EACA;EACA;EAJE,GAAA,EAAA;MAAAiC,GAAA,EAAA,MAAA;EAAAtB,IAAAA,KAAA,EAKA,SAAAzB,IAAMgC,CAAAA,EAAE,EAAE;EACR,MAAA,OAAOiB,OAAO,CAACjB,EAAE,CAAC,IAAIgB,qBAAA,CAAI,IAAA,EAAAlC,QAAA,CAAA,CAAUd,IAAI,CAACgC,EAAE,CAAC,CAAA;EAC9C,KAAA;EAAC,GAAA,EAAA;MAAAe,GAAA,EAAA,OAAA;EAAAtB,IAAAA,KAAA,EAED,SAAAM,KAAOC,CAAAA,EAAE,EAAE;EACT,MAAA,OAAOiB,OAAO,CAACjB,EAAE,CAAC,IAAIgB,qBAAA,CAAI,IAAA,EAAAlC,QAAA,CAAA,CAAUd,IAAI,CAACgC,EAAE,CAAC,CAAA;EAC9C,KAAA;;EAEA;EACF;EACA;EACA;EACA;EAJE,GAAA,EAAA;MAAAe,GAAA,EAAA,MAAA;MAAAtB,KAAA,EAKA,SAAAyB,IAAAA,GAAe;EAAA,MAAA,IAATlB,EAAE,GAAAmB,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;EACX,MAAA,IAAMG,KAAK,GAAGtB,EAAE,CAACsB,KAAK,CAAAN,qBAAA,CAAC,IAAI,EAAAlC,QAAA,CAAS,CAAC,CAAA;EACrC,MAAA,OAAOwC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAA;EAC1B,KAAA;;EAEA;EACF;EACA;EACA;EACA;EAJE,GAAA,EAAA;MAAAP,GAAA,EAAA,SAAA;MAAAtB,KAAA,EAKA,SAAA8B,OAAAA,GAAkB;EAAA,MAAA,IAATvB,EAAE,GAAAmB,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;QACd,OAAOH,qBAAA,KAAI,EAAApC,KAAA,EAAO4C,MAAM,CACtB,UAAAC,KAAK,EAAA;UAAA,OAAI,IAAI1D,MAAM,CAAC0D,KAAK,EAAE9C,KAAK,CAAC,CAACX,IAAI,CAACgC,EAAE,CAAC,CAAA;EAAA,OAC5C,CAAC,CAAA;EACH,KAAA;;EAEA;EACF;EACA;EACA;EACA;EAJE,GAAA,EAAA;MAAAe,GAAA,EAAA,OAAA;MAAAtB,KAAA,EAKA,SAAAiC,KAAAA,GAAgB;EAAA,MAAA,IAAT1B,EAAE,GAAAmB,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;QACZ,IAAI,CAACQ,OAAO,CAAC,IAAI,CAACJ,OAAO,CAACvB,EAAE,CAAC,CAAC,CAAA;EAChC,KAAA;;EAEA;EACF;EACA;EACA;EACA;EAJE,GAAA,EAAA;MAAAe,GAAA,EAAA,QAAA;MAAAtB,KAAA,EAKA,SAAAmC,MAAAA,GAAsB;EAAA,MAAA,IAAAC,MAAA,GAAA,IAAA,CAAA;EAAA,MAAA,IAAdC,OAAO,GAAAX,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;EAClB,MAAA,EAAE,CAACY,IAAI,CAACC,KAAK,CAAAhB,qBAAA,CACX,IAAI,EAAApC,KAAA,GACJkD,OAAO,CAACN,MAAM,CACZ,UAAAS,IAAI,EAAA;EAAA,QAAA,OAAIrC,sBAAA,CAAAiC,MAAI,EAAA5C,MAAA,EAAAiD,OAAA,CAAApC,CAAAA,IAAA,CAAJ+B,MAAI,EAAQI,IAAI,CAAA,KAAM,CAAC,CAAC,CAAA;EAAA,OAClC,CAAC,CAACE,GAAG,CACH,UAAAX,MAAM,EAAA;EAAA,QAAA,OAAIA,MAAM,CAACY,WAAW,EAAE,CAAA;EAAA,OAChC,CACF,CAAC,CAAA;QACDxC,sBAAA,CAAA,IAAI,EAAAb,OAAA,EAAAc,QAAA,CAAAC,CAAAA,IAAA,CAAJ,IAAI,CAAA,CAAA;EACN,KAAA;;EAEA;EACF;EACA;EACA;EACA;EAJE,GAAA,EAAA;MAAAiB,GAAA,EAAA,SAAA;MAAAtB,KAAA,EAKA,SAAAkC,OAAAA,GAAuB;EAAA,MAAA,IAAdG,OAAO,GAAAX,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;EACnB,MAAA,IAAMC,MAAM,GAAKU,OAAO,CAAlBV,MAAM,CAAA;QACZ,OAAOA,MAAM,EAAE,EAAE;EACf,QAAA,IAAM5C,KAAK,GAAAoB,sBAAA,CAAG,IAAI,EAAAX,MAAA,EAAAiD,OAAA,CAAApC,CAAAA,IAAA,CAAJ,IAAI,EAAQgC,OAAO,CAACV,MAAM,CAAC,CAAC,CAAA;EAC1C,QAAA,IAAI5C,KAAK,GAAG,CAAC,CAAC,EAAE;YACdwC,qBAAA,CAAA,IAAI,EAAApC,KAAA,CAAA,CAAOF,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,CAAA;EAC7B,SAAA;EACF,OAAA;QACAoB,sBAAA,CAAA,IAAI,EAAAb,OAAA,EAAAc,QAAA,CAAAC,CAAAA,IAAA,CAAJ,IAAI,CAAA,CAAA;EACN,KAAA;;EAEA;EACF;EACA;EACA;EACA;EAJE,GAAA,EAAA;MAAAiB,GAAA,EAAA,OAAA;EAAAtB,IAAAA,KAAA,EAKA,SAAA4C,KAAOvE,CAAAA,IAAI,EAAE;QACX,OAAO,IAAIoB,KAAK,CAACpB,IAAI,IAAAkD,qBAAA,CAAI,IAAI,EAAApC,KAAA,CAAM,CAAC,CAAA;EACtC,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAAM,KAAA,CAAA;EAAA,CAAA,EAAA,CAAA;EACF,SAAAW,WA5GY;EACTH,EAAAA,qBAAA,KAAI,EAAAZ,QAAA,EAAY,IAAIf,MAAM,CACxBiD,qBAAA,CAAA,IAAI,EAAApC,KAAA,EAAO0D,IAAI,CAAC,GAAG,CAAC,EACpB3D,KACF,CAAC,CAAA,CAAA;EACH,CAAA;EAAC,SAAAuD,OAAAA,CAOOD,IAAI,EAAE;EACZ,EAAA,OAAOjB,qBAAA,CAAA,IAAI,EAAApC,KAAA,CAAO2D,CAAAA,OAAO,CAACN,IAAI,CAACG,WAAW,EAAE,CAAC,CAAA;EAC/C;;ACjEF,MAAMrC,KAAK,GAAG,IAAIb,KAAK;;;;;;;;"}