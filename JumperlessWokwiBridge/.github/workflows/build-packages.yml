name: Build Cross-Platform Packages

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    name: Build Windows Package
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create icon.ico if missing
      run: |
        if (!(Test-Path "icon.ico")) {
          if (Test-Path "icon.icns") {
            Write-Host "Converting icon.icns to icon.ico..."
            # For now, copy icns as ico (Windows will handle it)
            Copy-Item "icon.icns" "icon.ico"
          } else {
            Write-Host "No icon found, creating placeholder"
            New-Item -Path "icon.ico" -ItemType File
          }
        }
      shell: powershell
    
    - name: Build Windows executable
      run: |
        python -m PyInstaller ^
          --onefile ^
          --console ^
          --name Jumperless ^
          --icon icon.ico ^
          --distpath . ^
          JumperlessWokwiBridge.py
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-package
        path: |
          Jumperless.exe
        retention-days: 30

  build-macos:
    name: Build macOS Package
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Make scripts executable
      run: |
        chmod +x jumperless_cli_launcher.sh
        chmod +x createDMG.sh
        chmod +x Packager_clean.py
    
    - name: Create required directories
      run: |
        mkdir -p "Jumperless Python"
        mkdir -p "JumperlessDMG"
    
    - name: Build macOS package
      run: |
        # Only build macOS package, skip Linux/Windows in CI
        python -c "
        import sys
        sys.path.append('.')
        from Packager_clean import package_macos
        package_macos()
        "
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macos-package
        path: |
          Jumperless_Installer.dmg
          dist/Jumperless.app
        retention-days: 30

  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
        # Install AppImage tools
        sudo apt-get update
        sudo apt-get install -y wget fuse
    
    - name: Make scripts executable
      run: |
        chmod +x jumperless_cli_launcher.sh
    
    - name: Build Linux packages
      run: |
        # Only build Linux packages
        python -c "
        import sys
        sys.path.append('.')
        from Packager_clean import package_linux
        package_linux()
        "
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: linux-packages
        path: |
          Jumperless-*.AppImage
          Jumperless-linux-*.tar.gz
          JumperlessLinux_*.AppDir
        retention-days: 30

  create-release:
    name: Create Release
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: List downloaded files
      run: |
        find . -type f -name "*.zip" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.tar.gz" -o -name "*.exe"
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-package/Jumperless.exe
          macos-package/Jumperless_Installer.dmg
          linux-packages/Jumperless-*.AppImage
          linux-packages/Jumperless-linux-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-packages:
    name: Test Packages
    needs: [build-windows, build-macos, build-linux]
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
    
    - name: Test Windows package
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path "windows-package\Jumperless.exe") {
          Write-Host "✅ Windows executable found"
          $size = (Get-Item "windows-package\Jumperless.exe").Length / 1MB
          Write-Host "📊 Size: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "❌ Windows executable not found"
          exit 1
        }
      shell: powershell
    
    - name: Test macOS package
      if: matrix.os == 'macos-latest'
      run: |
        if [ -f "macos-package/Jumperless_Installer.dmg" ]; then
          echo "✅ macOS DMG found"
          ls -lh macos-package/Jumperless_Installer.dmg
        else
          echo "❌ macOS DMG not found"
          exit 1
        fi
    
    - name: Test Linux packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        if ls linux-packages/Jumperless-linux-*.tar.gz 1> /dev/null 2>&1; then
          echo "✅ Linux packages found"
          ls -lh linux-packages/Jumperless-linux-*.tar.gz
        else
          echo "❌ Linux packages not found"
          exit 1
        fi 